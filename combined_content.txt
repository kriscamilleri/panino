----- START: package.json -----
{
  "name": "pn-markdown-notes",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "llm": "node ./generate-llm-file.cjs",
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "dompurify": "^3.2.3",
    "markdown-it": "^14.1.0",
    "markdown-it-task-lists": "^2.1.1",
    "pinia": "^2.3.0",
    "vue": "^3.5.13",
    "vue-router": "^4.5.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.2.1",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "vite": "^6.0.3"
  }
}
----- END: package.json -----

----- START: postcss.config.js -----
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----- END: postcss.config.js -----

----- START: tailwind.config.js -----
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

----- END: tailwind.config.js -----

----- START: vite.config.js -----
// vite.config.js
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import path from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
})

----- END: vite.config.js -----

----- START: src/AppShell.vue -----
<template>
    <!-- <header>My global header or nav</header> -->

    <router-view />

    <!-- <footer>My global footer</footer> -->
</template>

<script setup>
// possibly some global things
</script>
----- END: src/AppShell.vue -----

----- START: src/main.js -----
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import { router } from './router'
import AppShell from './AppShell.vue' // your new root layout
import './assets/main.css'

createApp(AppShell)
    .use(createPinia())
    .use(router)
    .mount('#app')

----- END: src/main.js -----

----- START: src/router.js -----
import { createRouter, createWebHashHistory } from 'vue-router'
import HomePage from '@/pages/HomePage.vue'
import StylesPage from '@/pages/StylesPage.vue'

export const router = createRouter({
    history: createWebHashHistory(),
    routes: [
        {
            path: '/',
            name: 'home',
            component: HomePage
        },
        {
            path: '/styles',
            name: 'styles',
            component: StylesPage
        }
    ]
})

----- END: src/router.js -----

----- START: src/components/Editor.vue -----
// src/components/Editor.vue
<template>
    <div v-if="file" class="h-full flex flex-col">
        <!-- Formatting toolbar -->
        <div class="flex flex-wrap gap-2 mb-4 p-2 bg-gray-100 rounded">
            <!-- Text formatting -->
            <button v-for="format in textFormats" :key="format.label"
                @click="insertFormat(format.prefix, format.suffix)"
                class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm" :title="format.label">
                {{ format.icon }}
            </button>

            <!-- Divider -->
            <div class="w-px h-6 bg-gray-300 mx-2"></div>

            <!-- Lists -->
            <button v-for="list in listFormats" :key="list.label" @click="insertList(list.prefix)"
                class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm" :title="list.label">
                {{ list.icon }}
            </button>

            <!-- Divider -->
            <div class="w-px h-6 bg-gray-300 mx-2"></div>

            <!-- Table -->
            <button @click="insertTable" class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm"
                title="Insert Table">
                |-|
            </button>

            <!-- Code block -->
            <button @click="insertCodeBlock" class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm"
                title="Insert Code Block">
                &lt;/&gt;
            </button>

            <!-- Divider -->
            <div class="w-px h-6 bg-gray-300 mx-2"></div>

            <!-- Toggle buttons -->
            <button @click="toggleStats" class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm"
                :class="{ 'bg-blue-50': showStats }" title="Toggle Document Stats">
                üìä Stats
            </button>
            <button @click="toggleMetadata" class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm"
                :class="{ 'bg-blue-50': showMetadata }" title="Toggle File Metadata">
                ‚ÑπÔ∏è Info
            </button>
        </div>

        <!-- Document Stats -->
        <div v-if="showStats" class="flex gap-4 text-sm text-gray-600 mb-4 p-2 bg-gray-50 rounded">
            <div class="flex items-center gap-2">
                <span class="font-medium">Words:</span>
                <span>{{ wordCount }}</span>
            </div>
            <div class="flex items-center gap-2">
                <span class="font-medium">Characters:</span>
                <span>{{ characterCount }}</span>
            </div>
            <div class="flex items-center gap-2">
                <span class="font-medium">Lines:</span>
                <span>{{ lineCount }}</span>
            </div>
        </div>

        <!-- File Metadata -->
        <div v-if="showMetadata" class="text-sm text-gray-600 mb-4 p-2 bg-gray-50 rounded">
            <div class="flex gap-4">
                <div class="flex items-center gap-2">
                    <span class="font-medium">Name:</span>
                    <span>{{ file.name }}</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="font-medium">Type:</span>
                    <span>{{ file.type }}</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="font-medium">Hash:</span>
                    <span>{{ file.hash }}</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="font-medium">TX:</span>
                    <span>{{ file.tx }}</span>
                </div>
            </div>
        </div>

        <div class="flex-1 flex flex-col min-h-0">
            <textarea ref="textareaRef" v-model="contentDraft" @input="handleInput"
                class="flex-1 border p-2 rounded w-full font-mono resize-none focus:outline-none focus:border-blue-500"
                placeholder="Start writing..."></textarea>
        </div>
    </div>
    <div v-else>
        <p class="text-gray-500">No file selected</p>
    </div>
</template>

<script setup>
import { ref, computed, watch } from 'vue'
import { useDocStore } from '@/store/docStore'

const docStore = useDocStore()
const textareaRef = ref(null)
const showStats = ref(true) // Default to showing stats
const showMetadata = ref(false) // Default to hiding metadata

const file = computed(() => docStore.selectedFile)
const originalContent = computed(() => docStore.selectedFileContent)

const contentDraft = ref('')
watch(originalContent, (val) => {
    contentDraft.value = val
}, { immediate: true })

// Stats computations
const wordCount = computed(() => {
    if (!contentDraft.value) return 0
    return contentDraft.value.trim().split(/\s+/).filter(word => word.length > 0).length
})

const characterCount = computed(() => {
    return contentDraft.value.length
})

const lineCount = computed(() => {
    if (!contentDraft.value) return 0
    return contentDraft.value.split('\n').length
})

// Text formatting options
const textFormats = [
    { label: 'Bold', icon: 'B', prefix: '**', suffix: '**' },
    { label: 'Italic', icon: 'I', prefix: '_', suffix: '_' },
    { label: 'Strike', icon: 'SÃ∂', prefix: '~~', suffix: '~~' },
    { label: 'Quote', icon: 'üí¨', prefix: '> ', suffix: '\n' },
]

// List formatting options
const listFormats = [
    { label: 'Bullet List', icon: '‚Ä¢', prefix: '* ' },
    { label: 'Numbered List', icon: '1.', prefix: '1. ' },
    { label: 'Task List', icon: '‚òê', prefix: '- [ ] ' },
]

// Toggle functions
function toggleStats() {
    showStats.value = !showStats.value
}

function toggleMetadata() {
    showMetadata.value = !showMetadata.value
}

// Formatting functions
function insertFormat(prefix, suffix) {
    const textarea = textareaRef.value
    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const selected = contentDraft.value.substring(start, end)

    const newText = contentDraft.value.substring(0, start) +
        prefix + selected + suffix +
        contentDraft.value.substring(end)

    contentDraft.value = newText

    // Update cursor position
    textarea.focus()
    const newCursorPos = selected ? start + prefix.length + selected.length + suffix.length : start + prefix.length
    textarea.setSelectionRange(newCursorPos, newCursorPos)
}

function insertList(prefix) {
    const textarea = textareaRef.value
    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const selected = contentDraft.value.substring(start, end)

    let newText
    if (selected) {
        newText = selected.split('\n').map(line => prefix + line).join('\n')
        contentDraft.value = contentDraft.value.substring(0, start) + newText + contentDraft.value.substring(end)
    } else {
        newText = prefix
        contentDraft.value = contentDraft.value.substring(0, start) + newText + contentDraft.value.substring(end)
    }

    textarea.focus()
    const newCursorPos = start + prefix.length
    textarea.setSelectionRange(newCursorPos, newCursorPos)
}

function insertTable() {
    const tableTemplate = `
| Header 1 | Header 2 | Header 3 |
|----------|----------|----------|
| Cell 1   | Cell 2   | Cell 3   |
| Cell 4   | Cell 5   | Cell 6   |
`
    insertAtCursor(tableTemplate)
}

function insertCodeBlock() {
    insertFormat('```\n', '\n```')
}

function insertAtCursor(text) {
    const textarea = textareaRef.value
    const start = textarea.selectionStart

    contentDraft.value = contentDraft.value.substring(0, start) +
        text +
        contentDraft.value.substring(start)

    textarea.focus()
    const newCursorPos = start + text.length
    textarea.setSelectionRange(newCursorPos, newCursorPos)
}

function handleInput() {
    if (file.value) {
        docStore.updateFileContent(file.value.id, contentDraft.value)
    }
}
</script>
----- END: src/components/Editor.vue -----

----- START: src/components/Preview.vue -----
// In src/components/Preview.vue

<template>
    <div v-if="file">
        <h2 class="text-xl font-bold mb-2">Preview: {{ file.name }}</h2>
        <div class="mt-2" v-html="renderedHtml"></div>
    </div>
    <div v-else>
        <p class="text-gray-500">No file selected</p>
    </div>
</template>

<script setup>
import { computed, watch } from 'vue'
import { useDocStore } from '@/store/docStore'
import DOMPurify from 'dompurify'

const docStore = useDocStore()

const file = computed(() => docStore.selectedFile)
const text = computed(() => docStore.selectedFileContent)
const styles = computed(() => docStore.styles)

// Make renderedHtml reactive to both content and styles changes
const renderedHtml = computed(() => {
    const md = docStore.getMarkdownIt()
    const raw = md.render(text.value || '')
    return DOMPurify.sanitize(raw)
})
</script>
----- END: src/components/Preview.vue -----

----- START: src/components/SideBar.vue -----
<template>
    <div class="h-full flex flex-col">
        <div class="flex justify-between items-center mb-4">
            <h2 class="font-bold text-lg">Documents</h2>
            <div class="flex space-x-2">
                <button @click="showCreateFileModal" class="p-2 hover:bg-gray-100 rounded" title="New File">
                    üìÑ+
                </button>
                <button @click="showCreateFolderModal" class="p-2 hover:bg-gray-100 rounded" title="New Folder">
                    üìÅ+
                </button>
            </div>
        </div>

        <!-- File Tree -->
        <div class="flex-1 overflow-y-auto">
            <ul class="space-y-1">
                <li v-for="item in rootItems" :key="item.id">
                    <TreeItem :item="item" />
                </li>
            </ul>
        </div>

        <!-- Create Modal -->
        <div v-if="showCreateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white p-4 rounded-lg shadow-lg w-96">
                <h3 class="text-lg font-semibold mb-4">Create New {{ createType }}</h3>
                <input v-model="newItemName" type="text" class="w-full border rounded p-2 mb-4"
                    :placeholder="'Enter ' + createType + ' name'" @keyup.enter="confirmCreate" />
                <div class="flex justify-end space-x-2">
                    <button @click="cancelCreate" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">
                        Cancel
                    </button>
                    <button @click="confirmCreate" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Create
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<script setup>
import { computed, ref } from 'vue'
import { useDocStore } from '@/store/docStore'
import TreeItem from './TreeItem.vue'

const docStore = useDocStore()
const rootItems = computed(() => docStore.rootItems)

// Create modal state
const showCreateModal = ref(false)
const createType = ref('')
const newItemName = ref('')

function showCreateFileModal() {
    createType.value = 'File'
    showCreateModal.value = true
}

function showCreateFolderModal() {
    createType.value = 'Folder'
    showCreateModal.value = true
}

function confirmCreate() {
    if (newItemName.value.trim()) {
        if (createType.value === 'File') {
            docStore.createFile(newItemName.value)
        } else {
            docStore.createFolder(newItemName.value)
        }
        cancelCreate()
    }
}

function cancelCreate() {
    showCreateModal.value = false
    newItemName.value = ''
    createType.value = ''
}
</script>
----- END: src/components/SideBar.vue -----

----- START: src/components/TreeItem.vue -----
<template>
    <div>
        <!-- Context Menu -->
        <div v-if="showContextMenu" class="fixed bg-white shadow-lg rounded-lg border p-2 z-50"
            :style="{ top: contextMenuY + 'px', left: contextMenuX + 'px' }">
            <button @click="handleDelete" class="w-full text-left px-3 py-1 hover:bg-red-100 text-red-600 rounded">
                Delete
            </button>
            <div class="border-t my-1"></div>
            <button v-if="isFolder" @click="handleNewFile" class="w-full text-left px-3 py-1 hover:bg-gray-100 rounded">
                New File
            </button>
            <button v-if="isFolder" @click="handleNewFolder"
                class="w-full text-left px-3 py-1 hover:bg-gray-100 rounded">
                New Folder
            </button>
        </div>

        <!-- FOLDER -->
        <div v-if="isFolder" class="flex items-center space-x-2 cursor-pointer group"
            @contextmenu.prevent="showMenu($event)">
            <span @click.stop="toggleFolderExpand(item.id)">
                <span v-if="folderOpen">‚ñº</span>
                <span v-else>‚ñ∫</span>
            </span>
            <span class="font-semibold flex-grow" @click.stop="toggleFolderExpand(item.id)">
                üìÅ {{ item.name }}
            </span>
            <button class="opacity-0 group-hover:opacity-100 px-2 hover:bg-gray-200 rounded"
                @click.stop="showMenu($event)">
                ‚ãÆ
            </button>
        </div>

        <!-- FILE -->
        <div v-else-if="isFile" class="flex items-center space-x-2 cursor-pointer group"
            @click="handleFileClick(item.id)" @contextmenu.prevent="showMenu($event)">
            <span>üìÑ</span>
            <span class="flex-grow">{{ item.name }}</span>
            <button class="opacity-0 group-hover:opacity-100 px-2 hover:bg-gray-200 rounded"
                @click.stop="showMenu($event)">
                ‚ãÆ
            </button>
        </div>

        <!-- Child items -->
        <ul v-if="isFolder && folderOpen" class="ml-6 mt-1 border-l pl-2">
            <li v-for="child in children" :key="child.id" class="mb-1">
                <TreeItem :item="child" />
            </li>
        </ul>

        <!-- Create New Modal -->
        <div v-if="showCreateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white p-4 rounded-lg shadow-lg w-96">
                <h3 class="text-lg font-semibold mb-4">Create New {{ createType }}</h3>
                <input v-model="newItemName" type="text" class="w-full border rounded p-2 mb-4"
                    :placeholder="'Enter ' + createType + ' name'" @keyup.enter="confirmCreate" />
                <div class="flex justify-end space-x-2">
                    <button @click="cancelCreate" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">
                        Cancel
                    </button>
                    <button @click="confirmCreate" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Create
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<script setup>
import { computed, ref } from 'vue'
import { useDocStore } from '@/store/docStore'
import { onMounted, onUnmounted } from 'vue'

const props = defineProps({
    item: { type: Object, required: true }
})

const docStore = useDocStore()

// Item type checks
const isFolder = computed(() => props.item.type === 'folder')
const isFile = computed(() => props.item.type === 'file')

// Folder state
const folderOpen = computed(() => {
    if (!isFolder.value) return false
    return docStore.openFolders.has(props.item.id)
})

// Context menu state
const showContextMenu = ref(false)
const contextMenuX = ref(0)
const contextMenuY = ref(0)

// Create modal state
const showCreateModal = ref(false)
const createType = ref('')
const newItemName = ref('')

// Get child items for folders
const children = computed(() => {
    if (isFolder.value) {
        return docStore.getChildren(props.item.id)
    }
    return []
})

// Event Handlers
function toggleFolderExpand(folderId) {
    docStore.toggleFolder(folderId)
}

function handleFileClick(fileId) {
    docStore.selectFile(fileId)
}

function showMenu(event) {
    // Position the context menu
    contextMenuX.value = event.clientX
    contextMenuY.value = event.clientY
    showContextMenu.value = true
}

function handleDelete() {
    if (confirm(`Are you sure you want to delete ${props.item.name}?`)) {
        docStore.deleteItem(props.item.id)
    }
    showContextMenu.value = false
}

function handleNewFile() {
    createType.value = 'File'
    showCreateModal.value = true
    showContextMenu.value = false
}

function handleNewFolder() {
    createType.value = 'Folder'
    showCreateModal.value = true
    showContextMenu.value = false
}

function confirmCreate() {
    if (newItemName.value.trim()) {
        if (createType.value === 'File') {
            docStore.createFile(newItemName.value, props.item.id)
        } else {
            docStore.createFolder(newItemName.value, props.item.id)
        }
        cancelCreate()
    }
}

function cancelCreate() {
    showCreateModal.value = false
    newItemName.value = ''
    createType.value = ''
}

// Close context menu when clicking outside
function handleClickOutside(event) {
    if (showContextMenu.value) {
        showContextMenu.value = false
    }
}

// Lifecycle hooks for click outside handler
onMounted(() => {
    document.addEventListener('click', handleClickOutside)
})

onUnmounted(() => {
    document.removeEventListener('click', handleClickOutside)
})
</script>
----- END: src/components/TreeItem.vue -----

----- START: src/pages/HomePage.vue -----
# src/pages/HomePage.vue
<template>
    <div class="h-screen flex flex-col overflow-hidden" ref="container">
        <!-- Top Navbar -->
        <nav class="bg-gray-100 border-b">
            <div class="flex items-center justify-between px-4 py-2">
                <!-- Left side -->
                <div class="flex items-center space-x-4">
                    <!-- View toggles -->
                    <div class="flex space-x-2">
                        <button @click="ui.toggleSidebar()" class="p-2 rounded hover:bg-gray-200"
                            :class="{ 'bg-gray-200': ui.showSidebar }" title="Toggle Sidebar">
                            üìÅ
                        </button>
                        <button @click="ui.toggleEditor()" class="p-2 rounded hover:bg-gray-200"
                            :class="{ 'bg-gray-200': ui.showEditor }" title="Toggle Editor">
                            ‚úèÔ∏è
                        </button>
                        <button @click="ui.togglePreview()" class="p-2 rounded hover:bg-gray-200"
                            :class="{ 'bg-gray-200': ui.showPreview }" title="Toggle Preview">
                            üëÅÔ∏è
                        </button>
                    </div>
                </div>

                <!-- Right side -->
                <div class="flex items-center space-x-2">
                    <button @click="handleExport"
                        class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1">
                        <span>üì§</span>
                        <span>Export</span>
                    </button>
                    <button @click="goToStyles"
                        class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1">
                        <span>üé®</span>
                        <span>Styles</span>
                    </button>
                </div>
            </div>
        </nav>

        <!-- Main content area -->
        <div class="flex flex-1 overflow-hidden" ref="mainContent">
            <!-- Sidebar with resizer -->
            <template v-if="ui.showSidebar">
                <div :style="{ width: sidebarWidth + 'px' }" class="flex-shrink-0 bg-gray-100 border-r overflow-hidden">
                    <div class="h-full overflow-y-auto p-4">
                        <Sidebar />
                    </div>
                </div>
                <div class="w-1 cursor-col-resize bg-gray-200 hover:bg-blue-300 active:bg-blue-400"
                    @mousedown="startResize('sidebar', $event)"></div>
            </template>

            <!-- Editor with resizer -->
            <template v-if="ui.showEditor">
                <div :style="{ width: editorWidth + 'px' }" class="flex-shrink-0 overflow-hidden">
                    <div class="h-full overflow-y-auto p-4">
                        <Editor />
                    </div>
                </div>
                <div v-if="ui.showPreview"
                    class="w-1 cursor-col-resize bg-gray-200 hover:bg-blue-300 active:bg-blue-400"
                    @mousedown="startResize('editor', $event)"></div>
            </template>

            <!-- Preview -->
            <div v-if="ui.showPreview" class="flex-1 overflow-hidden">
                <div class="h-full overflow-y-auto p-4">
                    <Preview />
                </div>
            </div>
        </div>
    </div>
</template>

<script setup>
import { useDocStore } from '@/store/docStore'
import { useUiStore } from '@/store/uiStore'
import Sidebar from '@/components/Sidebar.vue'
import Editor from '@/components/Editor.vue'
import Preview from '@/components/Preview.vue'
import { useRouter } from 'vue-router'
import { ref, onMounted, onUnmounted } from 'vue'

const docStore = useDocStore()
const ui = useUiStore()
const router = useRouter()

// Refs for DOM elements
const container = ref(null)
const mainContent = ref(null)

// Default widths when panels are restored
const DEFAULT_SIDEBAR_WIDTH = 300
const DEFAULT_EDITOR_WIDTH = 500
const MINIMUM_PREVIEW_WIDTH = 50  // Minimum width before considering preview collapsed

// Panel widths
const sidebarWidth = ref(DEFAULT_SIDEBAR_WIDTH)
const editorWidth = ref(DEFAULT_EDITOR_WIDTH)
let isResizing = ref(false)
let currentResizer = ref(null)
let startX = ref(0)
let startWidth = ref(0)

// Toggle handlers
function handleSidebarToggle(event) {
    if (event.target.checked) {
        sidebarWidth.value = DEFAULT_SIDEBAR_WIDTH
        adjustEditorWidthForContainer()
    }
}

function handleEditorToggle(event) {
    if (event.target.checked) {
        editorWidth.value = DEFAULT_EDITOR_WIDTH
        adjustEditorWidthForContainer()
    }
}

function handlePreviewToggle(event) {
    if (event.target.checked && mainContent.value) {
        // Calculate available width
        const containerWidth = mainContent.value.clientWidth
        const sidebarTotalWidth = ui.showSidebar ? sidebarWidth.value + 4 : 0
        const availableWidth = containerWidth - sidebarTotalWidth

        // Ensure minimum preview width by reducing editor width if necessary
        const desiredPreviewWidth = Math.max(MINIMUM_PREVIEW_WIDTH * 4, availableWidth * 0.3) // At least 200px or 30% of available space
        const maxEditorWidth = availableWidth - desiredPreviewWidth

        if (editorWidth.value > maxEditorWidth) {
            editorWidth.value = maxEditorWidth
        }
    }
}

// Adjust editor width based on container constraints
function adjustEditorWidthForContainer() {
    if (!mainContent.value || !ui.showEditor) return

    const containerWidth = mainContent.value.clientWidth
    const sidebarTotalWidth = ui.showSidebar ? sidebarWidth.value + 4 : 0 // Including resize handle
    const availableWidth = containerWidth - sidebarTotalWidth

    // If editor is taking up almost all available space, collapse preview
    if (editorWidth.value >= availableWidth - MINIMUM_PREVIEW_WIDTH) {
        ui.showPreview = false
    }
}

// Resize functionality
function startResize(panel, event) {
    isResizing.value = true
    currentResizer.value = panel
    startX.value = event.pageX
    startWidth.value = panel === 'sidebar' ? sidebarWidth.value : editorWidth.value

    // Add event listeners
    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', stopResize)
    // Prevent text selection while resizing
    document.body.style.userSelect = 'none'
}

function handleMouseMove(event) {
    if (!isResizing.value || !mainContent.value) return

    const containerWidth = mainContent.value.clientWidth
    const diff = event.pageX - startX.value

    if (currentResizer.value === 'sidebar') {
        const newWidth = startWidth.value + diff
        if (newWidth <= 0) {
            ui.showSidebar = false
            stopResize()
        } else {
            sidebarWidth.value = newWidth
            adjustEditorWidthForContainer()
        }
    } else if (currentResizer.value === 'editor') {
        const newWidth = startWidth.value + diff
        const sidebarTotalWidth = ui.showSidebar ? sidebarWidth.value + 4 : 0
        const availableWidth = containerWidth - sidebarTotalWidth

        if (newWidth <= 0) {
            ui.showEditor = false
            stopResize()
        } else if (newWidth >= availableWidth - MINIMUM_PREVIEW_WIDTH) {
            editorWidth.value = availableWidth
            ui.showPreview = false
        } else {
            editorWidth.value = newWidth
            if (!ui.showPreview) {
                ui.showPreview = true
            }
        }
    }
}

function stopResize() {
    isResizing.value = false
    document.removeEventListener('mousemove', handleMouseMove)
    document.removeEventListener('mouseup', stopResize)
    document.body.style.userSelect = ''
}

// Watch for window resize
let resizeTimeout
onMounted(() => {
    window.addEventListener('resize', () => {
        // Debounce the resize event
        clearTimeout(resizeTimeout)
        resizeTimeout = setTimeout(() => {
            adjustEditorWidthForContainer()
        }, 100)
    })
})

// Cleanup
onUnmounted(() => {
    document.removeEventListener('mousemove', handleMouseMove)
    document.removeEventListener('mouseup', stopResize)
    window.removeEventListener('resize')
    clearTimeout(resizeTimeout)
})

function handleExport() {
    const jsonString = docStore.exportJson()
    const blob = new Blob([jsonString], { type: 'application/json' })
    const url = URL.createObjectURL(blob)

    const link = document.createElement('a')
    link.href = url
    link.download = 'data.json'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
}

function goToStyles() {
    router.push('/styles')
}
</script>

<style scoped>
/* Prevent text selection while resizing */
.resize-handle {
    user-select: none;
}
</style>
----- END: src/pages/HomePage.vue -----

----- START: src/pages/StylesPage.vue -----
<template>
    <div class="p-4">
        <h1 class="text-2xl font-bold mb-4">Customize Markdown Styles</h1>

        <!-- Back to main -->
        <button class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded mb-4" @click="goBack">
            Back
        </button>

        <div class="space-y-4">
            <div v-for="(value, key) in styleMap" :key="key" class="flex items-center space-x-4">
                <label class="w-20 font-semibold">{{ key }}</label>
                <input type="text" class="border p-2 rounded flex-1" v-model="styleMap[key]"
                    @change="handleStyleChange(key, styleMap[key])" />
            </div>
        </div>
    </div>
</template>

<script setup>
import { useRouter } from 'vue-router'
import { computed } from 'vue'
import { useDocStore } from '@/store/docStore'

const docStore = useDocStore()
const router = useRouter()

// We make a local copy of docStore.styles so we can edit them. 
// If you want immediate updates, you can skip the copy and write directly to docStore.styles.
const styleMap = computed({
    get: () => docStore.styles,
    set: (newVal) => { }
})

function handleStyleChange(key, newVal) {
    docStore.updateStyle(key, newVal)
}

function goBack() {
    router.push('/')
}
</script>
----- END: src/pages/StylesPage.vue -----

----- START: src/store/docStore.js -----
// In src/store/docStore.js

import { defineStore } from 'pinia'
import MarkdownIt from 'markdown-it'
import markdownItTaskLists from 'markdown-it-task-lists'
import { ref, computed } from 'vue'
import rawDataImport from '@/assets/data.json'

export const useDocStore = defineStore('docStore', () => {
    // Initialize the data store with the imported data
    const data = ref(rawDataImport)
    const selectedFileId = ref(null)
    const openFolders = ref(new Set())

    // Default Tailwind classes for each element
    const styles = ref({
        h1: 'text-3xl font-bold mt-4 mb-2 block',
        h2: 'text-2xl font-semibold mt-3 mb-2 block',
        h3: 'text-xl font-semibold mt-2 mb-1 block',
        p: 'mb-2 leading-relaxed',
        ul: 'list-disc list-inside mb-2',
        ol: 'list-decimal list-inside mb-2',
        li: 'ml-5 mb-1',
        code: 'bg-gray-100 text-sm px-1 py-0.5 rounded',
        blockquote: 'border-l-4 border-gray-300 pl-4 italic my-2',
        hr: 'border-t my-4',
        em: 'italic',
        strong: 'font-bold',
        a: 'text-blue-600 underline',
        img: 'max-w-full h-auto',
        table: 'border-collapse border border-gray-300 my-2',
        tr: '',
        th: 'border border-gray-300 bg-gray-100 px-2 py-1',
        td: 'border border-gray-300 px-2 py-1',
    })

    const itemsArray = computed(() => Object.values(data.value))

    const rootItems = computed(() => {
        const folders = itemsArray.value.filter(i => !i.parentId && i.type === 'folder')
        const files = itemsArray.value.filter(i => !i.parentId && i.type === 'file')
        return [...sortByName(folders), ...sortByName(files)]
    })

    // Generate a unique ID
    function generateId() {
        return Math.random().toString(36).substring(2, 15)
    }

    // Create a new file
    function createFile(name, parentId = null) {
        const id = generateId()
        const newFile = {
            id,
            type: 'file',
            name,
            parentId,
            hash: Date.now(),
            tx: Date.now()
        }

        // Create the file content
        const contentId = `${id}/content`
        const content = {
            id: contentId,
            type: 'content',
            text: '', // Empty initial content
            properties: '\n',
            discussions: {},
            comments: {},
            hash: Date.now(),
            tx: Date.now()
        }

        // Add both the file and its content to the store
        data.value = {
            ...data.value,
            [id]: newFile,
            [contentId]: content
        }

        // Select the newly created file
        selectFile(id)

        // If parent is a folder, ensure it's open
        if (parentId) {
            openFolders.value.add(parentId)
        }

        return id
    }

    // Create a new folder
    function createFolder(name, parentId = null) {
        const id = generateId()
        const newFolder = {
            id,
            type: 'folder',
            name,
            parentId,
            hash: Date.now(),
            tx: Date.now()
        }

        data.value = {
            ...data.value,
            [id]: newFolder
        }

        // Open the parent folder if it exists
        if (parentId) {
            openFolders.value.add(parentId)
        }

        return id
    }

    // Delete an item (file or folder)
    function deleteItem(id) {
        if (!data.value[id]) return

        // If it's a folder, recursively delete all children
        if (data.value[id].type === 'folder') {
            const children = getChildren(id)
            children.forEach(child => deleteItem(child.id))
            openFolders.value.delete(id)
        }

        // If it's a file, delete its content
        if (data.value[id].type === 'file') {
            const contentKey = `${id}/content`
            delete data.value[contentKey]
            if (selectedFileId.value === id) {
                selectedFileId.value = null
            }
        }

        // Delete the item itself
        delete data.value[id]
        data.value = { ...data.value } // Trigger reactivity
    }

    function getChildren(parentId) {
        const folders = itemsArray.value.filter(i => i.parentId === parentId && i.type === 'folder')
        const files = itemsArray.value.filter(i => i.parentId === parentId && i.type === 'file')
        return [...sortByName(folders), ...sortByName(files)]
    }

    function sortByName(items) {
        return items.slice().sort((a, b) => (a.name || '').localeCompare(b.name || ''))
    }

    function selectFile(fileId) {
        selectedFileId.value = fileId
    }

    const selectedFile = computed(() => {
        if (!selectedFileId.value) return null
        return data.value[selectedFileId.value] || null
    })

    const selectedFileContent = computed(() => {
        if (!selectedFile.value) return ''
        const contentKey = `${selectedFile.value.id}/content`
        return data.value[contentKey]?.text || ''
    })

    function updateFileContent(fileId, newText) {
        const contentKey = `${fileId}/content`
        if (data.value[contentKey]) {
            data.value = {
                ...data.value,
                [contentKey]: {
                    ...data.value[contentKey],
                    text: newText,
                    lastModified: new Date().toISOString()
                }
            }
        }
    }

    function exportJson() {
        return JSON.stringify(data.value, null, 2)
    }

    function toggleFolder(folderId) {
        if (openFolders.value.has(folderId)) {
            openFolders.value.delete(folderId)
        } else {
            openFolders.value.add(folderId)
        }
    }

    function updateStyle(key, newClass) {
        if (styles.value[key] !== undefined) {
            styles.value[key] = newClass
        }
    }

    // Create markdown-it instance with desired options
    function getMarkdownIt() {
        const md = new MarkdownIt({
            html: true,
            linkify: true,
            typographer: true,
            breaks: true
        }).use(markdownItTaskLists)

        // Customize the rendering rules to add our Tailwind classes
        md.renderer.rules.paragraph_open = () => `<span class="${styles.value.p}">`
        md.renderer.rules.paragraph_close = () => '</span>'
        md.renderer.rules.heading_open = (tokens, idx) => {
            const tag = tokens[idx].tag
            return `<${tag} class="${styles.value[tag]}">`
        }
        md.renderer.rules.bullet_list_open = () => `<ul class="${styles.value.ul}">`
        md.renderer.rules.ordered_list_open = () => `<ol class="${styles.value.ol}">`
        md.renderer.rules.list_item_open = (tokens, idx) => {
            if (tokens[idx].map && tokens[idx].map.length > 0) {
                if (tokens[idx + 2]?.type === 'task_list_item_open') {
                    const checked = tokens[idx + 2].checked
                    return `<li class="${styles.value.li}"><input type="checkbox" ${checked ? 'checked' : ''} disabled> `
                }
            }
            return `<li class="${styles.value.li}">`
        }
        md.renderer.rules.code_inline = (tokens, idx) =>
            `<code class="${styles.value.code}">${tokens[idx].content}</code>`
        md.renderer.rules.blockquote_open = () =>
            `<blockquote class="${styles.value.blockquote}">`
        md.renderer.rules.hr = () => `<hr class="${styles.value.hr}">`
        md.renderer.rules.em_open = () => `<em class="${styles.value.em}">`
        md.renderer.rules.strong_open = () => `<strong class="${styles.value.strong}">`
        md.renderer.rules.link_open = (tokens, idx) => {
            const href = tokens[idx].attrGet('href')
            return `<a href="${href}" class="${styles.value.a}" target="_blank" rel="noopener">`
        }
        md.renderer.rules.image = (tokens, idx) => {
            const token = tokens[idx]
            const src = token.attrGet('src')
            const alt = token.content
            const title = token.attrGet('title')
            return `<img src="${src}" alt="${alt}" title="${title || ''}" class="${styles.value.img}">`
        }
        md.renderer.rules.table_open = () => `<table class="${styles.value.table}">`
        md.renderer.rules.th_open = () => `<th class="${styles.value.th}">`
        md.renderer.rules.td_open = () => `<td class="${styles.value.td}">`

        return md
    }

    return {
        selectedFileId,
        openFolders,
        styles,
        itemsArray,
        rootItems,
        selectedFile,
        selectedFileContent,
        getChildren,
        selectFile,
        updateFileContent,
        exportJson,
        toggleFolder,
        updateStyle,
        getMarkdownIt,
        createFile,
        createFolder,
        deleteItem,
    }
})
----- END: src/store/docStore.js -----

----- START: src/store/uiStore.js -----
// store/uiStore.js
import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useUiStore = defineStore('uiStore', () => {
    // By default, everything is open
    const showSidebar = ref(true)
    const showEditor = ref(true)
    const showPreview = ref(true)

    function toggleSidebar() {
        showSidebar.value = !showSidebar.value
    }

    function toggleEditor() {
        showEditor.value = !showEditor.value
    }

    function togglePreview() {
        showPreview.value = !showPreview.value
    }

    return {
        showSidebar,
        showEditor,
        showPreview,
        toggleSidebar,
        toggleEditor,
        togglePreview,
    }
})

----- END: src/store/uiStore.js -----


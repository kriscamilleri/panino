----- START: package.json -----
{
  "name": "pn-markdown-notes",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "couch": "node ./couchdb-setup.js",
    "llm": "node ./generate-llm-file.cjs",
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "dompurify": "^3.2.3",
    "events": "^3.3.0",
    "lucide-vue-next": "^0.469.0",
    "markdown-it": "^14.1.0",
    "markdown-it-task-lists": "^2.1.1",
    "pinia": "^2.3.0",
    "pouchdb-browser": "^9.0.0",
    "vue": "^3.5.13",
    "vue-router": "^4.5.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.2.1",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "vite": "^6.0.3"
  }
}
----- END: package.json -----

----- START: postcss.config.js -----
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

----- END: postcss.config.js -----

----- START: tailwind.config.js -----
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

----- END: tailwind.config.js -----

----- START: vite.config.js -----
// vite.config.js
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import path from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  define: {
    global: 'globalThis'
  },
  optimizeDeps: {
    allowNodeBuiltins: ['pouchdb-browser', 'pouchdb-utils']
}
})

----- END: vite.config.js -----

----- START: couchdb-init/index.js -----
import fetch from 'node-fetch';

const COUCHDB_HOST = process.env.COUCHDB_HOST || '127.0.0.1';
const COUCHDB_PORT = process.env.COUCHDB_PORT || '5984';
const ADMIN_USER = process.env.ADMIN_USER || 'admin';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'password';
// const NODENAME = process.env.NODENAME || 'couchdb@localhost';

async function putConfig(path, value) {
    const url = `http://${COUCHDB_HOST}:${COUCHDB_PORT}/_node/_local/_config/${path}`;
    const authHeader = 'Basic ' + Buffer.from(`${ADMIN_USER}:${ADMIN_PASSWORD}`).toString('base64');

    const res = await fetch(url, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': authHeader,
        },
        body: JSON.stringify(value)
    });
    if (!res.ok) {
        const text = await res.text();
        throw new Error(`Failed to PUT ${path}: ${res.status} - ${text}`);
    }
}

async function createDatabase(dbName) {
    const url = `http://${COUCHDB_HOST}:${COUCHDB_PORT}/${dbName}`;
    const authHeader = 'Basic ' + Buffer.from(`${ADMIN_USER}:${ADMIN_PASSWORD}`).toString('base64');

    const res = await fetch(url, {
        method: 'PUT',
        headers: {
            'Authorization': authHeader,
        }
    });
    if (!res.ok) {
        const text = await res.text();
        throw new Error(`Failed to create database ${dbName}: ${res.status} - ${text}`);
    }
}

async function main() {
    console.log('Enabling CORS on CouchDB...');
    await putConfig('httpd/enable_cors', 'true');
    await putConfig('cors/origins', '*');
    await putConfig('cors/credentials', 'true');
    await putConfig('cors/methods', 'GET, PUT, POST, HEAD, DELETE');
    await putConfig('cors/headers', 'accept, authorization, content-type, origin, referer, x-csrf-token');
    console.log('CORS setup complete.');

    console.log('Creating _users database...');
    await createDatabase('_users');
    console.log('_users database created.');

    // REMOVED: PerUser auto-creation lines to avoid conflicts with the signup service:
    // console.log('Configuring Couch PerUser...');
    // await putConfig('chttpd/require_valid_user', 'true');
    // await putConfig('couch_peruser/enable', 'true');
    // await putConfig('couch_peruser/delayed_commits', 'false');
    // console.log('Couch PerUser setup complete.');

    console.log('Done!');
}

main().catch(err => {
    console.error('Error during CouchDB setup:', err);
    process.exit(1);
});

----- END: couchdb-init/index.js -----

----- START: couchdb-init/package.json -----
{
    "name": "couchdb-init",
    "version": "1.0.0",
    "description": "A simple Node.js script to configure CORS (and optional setup) for CouchDB",
    "type": "module",
    "scripts": {
        "start": "node index.js"
    },
    "dependencies": {
        "node-fetch": "^3.3.1"
    }
}
----- END: couchdb-init/package.json -----

----- START: signup-service/index.js -----
import express from 'express'
import fetch from 'node-fetch'
import cors from 'cors'

// Pull credentials from environment variables (provided by docker-compose)
const COUCHDB_URL = process.env.COUCHDB_URL || 'http://127.0.0.1:5984'
const ADMIN_USER = process.env.ADMIN_USER || 'admin'
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'password'

const app = express()
app.use(cors()) // This allows all origins
app.use(express.json())

// Health check
app.get('/', (req, res) => {
   res.send('Sign-up service is running.')
})

/**
 * POST /signup
 * Creates a user in CouchDB.
 * Expects JSON body: { username: string, password: string }
 */
app.post('/signup', async (req, res) => {
   try {
      const { username, password } = req.body
      if (!username || !password) {
         return res.status(400).json({
            error: 'Missing username or password'
         })
      }

      // Create user in _users database
      const userDoc = {
         _id: `org.couchdb.user:${username}`,
         name: username,
         roles: [],
         type: 'user',
         password: password
      }

      // Create user in _users database
      const userResponse = await fetch(`${COUCHDB_URL}/_users/org.couchdb.user:${username}`, {
         method: 'PUT',
         headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Basic ' + Buffer.from(`${ADMIN_USER}:${ADMIN_PASSWORD}`).toString('base64')
         },
         body: JSON.stringify(userDoc)
      })

      const userData = await userResponse.json()
      if (!userResponse.ok) {
         console.error('Failed to create user:', userData)
         return res.status(userResponse.status).json({
            error: userData.error,
            reason: userData.reason
         })
      }

      // Create user database
      const dbName = `userdb-${username}`
      const createDbResponse = await fetch(`${COUCHDB_URL}/${dbName}`, {
         method: 'PUT',
         headers: {
            'Authorization': 'Basic ' + Buffer.from(`${ADMIN_USER}:${ADMIN_PASSWORD}`).toString('base64')
         }
      })

      if (!createDbResponse.ok) {
         const dbError = await createDbResponse.json()
         // If database already exists, that's okay - continue
         if (dbError.error !== 'file_exists') {
            console.error('Failed to create database:', dbError)
            return res.status(createDbResponse.status).json({
               error: dbError.error,
               reason: dbError.reason
            })
         }
      }

      // Set security permissions for the database
      const securityDoc = {
         admins: {
            names: [],
            roles: []
         },
         members: {
            names: [username],
            roles: []
         }
      }

      const securityResponse = await fetch(`${COUCHDB_URL}/${dbName}/_security`, {
         method: 'PUT',
         headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Basic ' + Buffer.from(`${ADMIN_USER}:${ADMIN_PASSWORD}`).toString('base64')
         },
         body: JSON.stringify(securityDoc)
      })

      if (!securityResponse.ok) {
         const secError = await securityResponse.json()
         console.error('Failed to set security:', secError)
         return res.status(securityResponse.status).json({
            error: secError.error,
            reason: secError.reason
         })
      }

      return res.json({
         ok: true,
         id: userData.id,
         rev: userData.rev,
         database: dbName
      })
   } catch (err) {
      console.error('Signup service error:', err)
      res.status(500).json({
         error: 'Internal Server Error',
         reason: err.message
      })
   }
})

// Start server
const port = process.env.PORT || 3000
app.listen(port, () => {
   console.log(`Signup service listening on port ${port}`)
})

----- END: signup-service/index.js -----

----- START: signup-service/package.json -----
{
    "name": "signup-service",
    "version": "1.0.0",
    "description": "Secure sign-up service for creating CouchDB users",
    "main": "index.js",
    "type": "module",
    "scripts": {
        "start": "node index.js"
    },
    "dependencies": {
        "cors": "^2.8.5",
        "express": "^4.18.2",
        "node-fetch": "^3.3.1"
    }
}
----- END: signup-service/package.json -----

----- START: src/AppShell.vue -----
<template>
    <router-view v-slot="{ Component }">
        <keep-alive>
            <component :is="Component" />
        </keep-alive>
    </router-view>
</template>
----- END: src/AppShell.vue -----

----- START: src/main.js -----
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import { router } from './router'
import AppShell from './AppShell.vue'
import './assets/main.css'

// 1) Import the docStore
import { useDocStore } from '@/store/docStore'

const pinia = createPinia()
const app = createApp(AppShell)
app.use(pinia)
app.use(router)

// 2) Initialize the docStore *before* you mount the app
//    This ensures the data is loaded from local DB and
//    remote sync is started in every tab:
const docStore = useDocStore()
docStore.initCouchDB() // <---- The key!

app.mount('#app')
----- END: src/main.js -----

----- START: src/router.js -----
import { createRouter, createWebHashHistory } from 'vue-router'
import HomePage from '@/pages/HomePage.vue'
import StylesPage from '@/pages/StylesPage.vue'

// NEW imports:
import LoginForm from '@/components/LoginForm.vue'
import SignupForm from '@/components/SignupForm.vue'

// ADD this import:
import { useAuthStore } from '@/store/authStore.js'

export const router = createRouter({
    history: createWebHashHistory(),
    routes: [
        {
            path: '/',
            name: 'home',
            component: HomePage,
            meta: { keepAlive: true }
        },
        {
            path: '/doc/:fileId',
            name: 'doc',
            component: HomePage,
            meta: { keepAlive: true }
        },
        {
            path: '/styles',
            name: 'styles',
            component: StylesPage,
            meta: { keepAlive: true }
        },
        // NEW routes:
        {
            path: '/login',
            name: 'login',
            component: LoginForm,
        },
        {
            path: '/signup',
            name: 'signup',
            component: SignupForm,
        },
    ]
})

// AMENDED global navigation guard:
router.beforeEach(async (to, from, next) => {
    const authStore = useAuthStore()
    // Attempt to check if user is logged in (based on existing session cookie, if any)
    await authStore.checkAuth()

    // If NOT authenticated and trying to access anything except login/signup, redirect to login
    if (!authStore.isAuthenticated && to.name !== 'login' && to.name !== 'signup') {
        next({ name: 'login' })
    } else {
        next()
    }
})
----- END: src/router.js -----

----- START: src/assets/styles.json -----
{
    "h1": "text-3xl font-bold mt-4 mb-2 block",
    "h2": "text-2xl font-semibold mt-3 mb-2 block",
    "h3": "text-xl font-semibold mt-2 mb-1 block",
    "p": "mb-2 leading-relaxed",
    "ul": "list-disc mb-2",
    "ol": "list-decimal mb-2",
    "li": "ml-5 mb-1",
    "code": "bg-gray-100 text-sm px-1 py-0.5 rounded",
    "blockquote": "border-l-4 border-gray-300 pl-4 italic my-2",
    "hr": "border-t my-4",
    "em": "italic",
    "strong": "font-bold",
    "a": "text-blue-600 underline",
    "img": "max-w-full h-auto",
    "table": "border-collapse border border-gray-300 my-2",
    "tr": "",
    "th": "border border-gray-300 bg-gray-100 px-2 py-1",
    "td": "border border-gray-300 px-2 py-1"
}
----- END: src/assets/styles.json -----

----- START: src/components/Editor.vue -----
<!-- ----- START: src/components/Editor.vue ----- -->
<template>
    <div v-if="file" class="h-full flex flex-col">
        <!-- Document Stats (toggled via uiStore.showStats) -->
        <div v-if="ui.showStats" class="flex gap-4 text-sm text-gray-600 mb-4 p-2 bg-gray-50 rounded">
            <div class="flex items-center gap-2">
                <span class="font-medium">Words:</span>
                <span>{{ wordCount }}</span>
            </div>
            <div class="flex items-center gap-2">
                <span class="font-medium">Characters:</span>
                <span>{{ characterCount }}</span>
            </div>
            <div class="flex items-center gap-2">
                <span class="font-medium">Lines:</span>
                <span>{{ lineCount }}</span>
            </div>
        </div>

        <!-- File Metadata (toggled via uiStore.showMetadata) -->
        <div v-if="ui.showMetadata" class="text-sm text-gray-600 mb-4 p-2 bg-gray-50 rounded">
            <div class="flex gap-4">
                <div class="flex items-center gap-2">
                    <span class="font-medium">Name:</span>
                    <span>{{ file.name }}</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="font-medium">Type:</span>
                    <span>{{ file.type }}</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="font-medium">Hash:</span>
                    <span>{{ file.hash }}</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="font-medium">TX:</span>
                    <span>{{ file.tx }}</span>
                </div>
            </div>
        </div>

        <!-- Textarea -->
        <div class="flex-1 flex flex-col min-h-0">
            <textarea ref="textareaRef" v-model="contentDraft" @input="handleInput"
                class="flex-1 border p-2 rounded w-full font-mono resize-none focus:outline-none focus:border-blue-500"
                placeholder="Start writing..."></textarea>
        </div>
    </div>
    <div v-else>
        <p class="text-gray-500">No file selected</p>
    </div>
</template>

<script setup>
import { ref, computed, watch, nextTick, defineExpose } from 'vue'
import { useDocStore } from '@/store/docStore'
import { useUiStore } from '@/store/uiStore'

const docStore = useDocStore()
const ui = useUiStore()

// References
const textareaRef = ref(null)

// We no longer store showStats / showMetadata locally; they're in uiStore.

// The selected file
const file = computed(() => docStore.selectedFile)
const originalContent = computed(() => docStore.selectedFileContent)
const contentDraft = ref('')
watch(originalContent, (val) => {
    contentDraft.value = val
}, { immediate: true })

// Stats computations
const wordCount = computed(() => {
    if (!contentDraft.value) return 0
    return contentDraft.value.trim().split(/\s+/).filter(word => word.length > 0).length
})
const characterCount = computed(() => {
    return contentDraft.value.length
})
const lineCount = computed(() => {
    if (!contentDraft.value) return 0
    return contentDraft.value.split('\n').length
})

// Sync content to store
function handleInput() {
    if (file.value) {
        docStore.updateFileContent(file.value.id, contentDraft.value)
    }
}

// ------------------------------------------------------
// Expose formatting & search methods so the Nav can call
// ------------------------------------------------------
function insertFormat(prefix, suffix) {
    const textarea = textareaRef.value
    if (!textarea) return
    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const selected = contentDraft.value.substring(start, end)

    const newText = contentDraft.value.substring(0, start) +
        prefix + selected + suffix +
        contentDraft.value.substring(end)

    contentDraft.value = newText

    // Update cursor position
    textarea.focus()
    const newCursorPos = selected
        ? start + prefix.length + selected.length + suffix.length
        : start + prefix.length
    textarea.setSelectionRange(newCursorPos, newCursorPos)
}

function insertList(prefix) {
    const textarea = textareaRef.value
    if (!textarea) return
    const start = textarea.selectionStart
    const end = textarea.selectionEnd
    const selected = contentDraft.value.substring(start, end)

    let newText
    if (selected) {
        newText = selected.split('\n').map(line => prefix + line).join('\n')
        contentDraft.value = contentDraft.value.substring(0, start) + newText + contentDraft.value.substring(end)
    } else {
        newText = prefix
        contentDraft.value = contentDraft.value.substring(0, start) + newText + contentDraft.value.substring(end)
    }

    textarea.focus()
    const newCursorPos = start + prefix.length
    textarea.setSelectionRange(newCursorPos, newCursorPos)
}

function insertTable() {
    const tableTemplate = `
| Header 1 | Header 2 | Header 3 |
|----------|----------|----------|
| Cell 1   | Cell 2   | Cell 3   |
| Cell 4   | Cell 5   | Cell 6   |
`
    insertAtCursor(tableTemplate)
}

function insertCodeBlock() {
    insertFormat('```\n', '\n```')
}

function insertAtCursor(text) {
    const textarea = textareaRef.value
    if (!textarea) return
    const start = textarea.selectionStart

    contentDraft.value = contentDraft.value.substring(0, start) +
        text +
        contentDraft.value.substring(start)

    textarea.focus()
    const newCursorPos = start + text.length
    textarea.setSelectionRange(newCursorPos, newCursorPos)
}

function findNext(term) {
    if (!term?.trim()) return
    const textarea = textareaRef.value
    if (!textarea) return

    // Start searching after the current selectionEnd
    let fromIndex = textarea.selectionEnd
    let foundIndex = contentDraft.value.indexOf(term, fromIndex)

    // If not found, wrap around from start
    if (foundIndex === -1 && fromIndex !== 0) {
        foundIndex = contentDraft.value.indexOf(term, 0)
    }

    // If still not found, nothing to do
    if (foundIndex === -1) return

    // Select that occurrence
    textarea.focus()
    textarea.setSelectionRange(foundIndex, foundIndex + term.length)

    // Attempt to scroll into view
    nextTick(() => {
        textarea.focus()
    })
}

// Expose these methods so parent can call them
defineExpose({
    insertFormat,
    insertList,
    insertTable,
    insertCodeBlock,
    findNext,
})
</script>
<!-- ----- END: src/components/Editor.vue ----- -->

----- END: src/components/Editor.vue -----

----- START: src/components/ImportModal.vue -----
<template>
    <div v-if="show" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg shadow-lg w-[600px] max-h-[80vh] flex flex-col">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Import Data</h3>
                <button @click="$emit('close')" class="text-gray-500 hover:text-gray-700">
                    <X class="w-5 h-5" />
                </button>
            </div>

            <!-- Drag and drop zone -->
            <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 mb-4 text-center"
                :class="{ 'border-blue-500 bg-blue-50': isDragging }" @dragenter.prevent="isDragging = true"
                @dragleave.prevent="isDragging = false" @dragover.prevent @drop.prevent="handleDrop">
                <div v-if="isDragging">Drop your file here</div>
                <div v-else>
                    <p class="mb-2">Drag and drop your JSON file here</p>
                    <p class="text-sm text-gray-500">or</p>
                    <input type="file" accept=".json" @change="handleFileSelect" class="hidden" ref="fileInput" />
                    <button @click="$refs.fileInput.click()"
                        class="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Choose File
                    </button>
                </div>
            </div>

            <!-- Manual JSON input -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Or paste your JSON data here:
                </label>
                <textarea v-model="jsonData" rows="8" class="w-full border rounded-lg p-2 font-mono text-sm"
                    placeholder="Paste your JSON data here..."></textarea>
            </div>

            <!-- Error message -->
            <div v-if="error" class="text-red-500 text-sm mb-4">
                {{ error }}
            </div>

            <!-- Action buttons -->
            <div class="flex justify-end space-x-2 mt-auto">
                <button @click="$emit('close')" class="px-4 py-2 border rounded hover:bg-gray-100">
                    Cancel
                </button>
                <button @click="importData" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                    :disabled="!jsonData">
                    Import
                </button>
            </div>
        </div>
    </div>
</template>

<script setup>
import { ref } from 'vue'
import { useDocStore } from '@/store/docStore'
import { X } from 'lucide-vue-next'

const props = defineProps({
    show: Boolean
})

const emit = defineEmits(['close', 'import-success'])
const docStore = useDocStore()

const isDragging = ref(false)
const jsonData = ref('')
const error = ref('')
const fileInput = ref(null)

function handleDrop(e) {
    isDragging.value = false
    const file = e.dataTransfer.files[0]
    if (file) {
        readFile(file)
    }
}

function handleFileSelect(e) {
    const file = e.target.files[0]
    if (file) {
        readFile(file)
    }
}

function readFile(file) {
    if (file.type !== 'application/json') {
        error.value = 'Please select a JSON file'
        return
    }

    const reader = new FileReader()
    reader.onload = (e) => {
        try {
            const content = e.target.result
            jsonData.value = content
            error.value = ''
        } catch (err) {
            error.value = 'Error reading file'
        }
    }
    reader.readAsText(file)
}

function importData() {
    if (!jsonData.value) {
        error.value = 'Please provide JSON data'
        return
    }
    try {
        const data = JSON.parse(jsonData.value)
        if (typeof data !== 'object' || data === null) {
            throw new Error('Invalid data structure')
        }
        docStore.importData(data)
        emit('import-success')
        emit('close')
    } catch (err) {
        error.value = 'Invalid JSON data: ' + err.message
    }
}
</script>

----- END: src/components/ImportModal.vue -----

----- START: src/components/LoginForm.vue -----
<template>
    <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-md w-full space-y-8">
            <div>
                <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                    Sign in to your account
                </h2>
            </div>
            <form class="mt-8 space-y-6" @submit.prevent="handleSubmit">
                <div class="rounded-md shadow-sm -space-y-px">
                    <div>
                        <label for="username" class="sr-only">Username</label>
                        <input id="username" v-model="username" name="username" type="text" required
                            class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Username">
                    </div>
                    <div>
                        <label for="password" class="sr-only">Password</label>
                        <input id="password" v-model="password" name="password" type="password" required
                            class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Password">
                    </div>
                </div>

                <div>
                    <button type="submit"
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        :disabled="loading">
                        {{ loading ? 'Signing in...' : 'Sign in' }}
                    </button>
                </div>

                <div v-if="error" class="text-red-500 text-center text-sm">
                    {{ error }}
                </div>

                <div class="text-sm text-center mt-4">
                    <router-link to="/signup" class="font-medium text-indigo-600 hover:text-indigo-500">
                        Don't have an account? Sign up
                    </router-link>
                </div>
            </form>
        </div>
    </div>
</template>

<script setup>
import { ref } from 'vue'
import { useAuthStore } from '../store/authStore'
import { useDocStore } from '../store/docStore'
import { useRouter } from 'vue-router'

const authStore = useAuthStore()
const docStore = useDocStore()
const router = useRouter()

const username = ref('')
const password = ref('')
const loading = ref(false)
const error = ref('')

async function handleSubmit() {
    loading.value = true
    error.value = ''

    try {
        await authStore.login(username.value, password.value)
        await docStore.initCouchDB()
        router.push('/')
    } catch (err) {
        error.value = 'Invalid username or password'
    } finally {
        loading.value = false
    }
}
</script>
----- END: src/components/LoginForm.vue -----

----- START: src/components/Preview.vue -----
// In src/components/Preview.vue

<template>
    <div v-if="file">
        <h2 class="text-xl font-bold mb-2">Preview: {{ file.name }}</h2>
        <div class="mt-2" v-html="renderedHtml"></div>
    </div>
    <div v-else>
        <p class="text-gray-500">No file selected</p>
    </div>
</template>

<script setup>
import { computed, watch } from 'vue'
import { useDocStore } from '@/store/docStore'
import DOMPurify from 'dompurify'

const docStore = useDocStore()

const file = computed(() => docStore.selectedFile)
const text = computed(() => docStore.selectedFileContent)

// Make renderedHtml reactive to both content and styles changes
const renderedHtml = computed(() => {
    const md = docStore.getMarkdownIt()
    const raw = md.render(text.value || '')
    return DOMPurify.sanitize(raw)
})
</script>
----- END: src/components/Preview.vue -----

----- START: src/components/SideBar.vue -----
<template>
    <div class="h-full flex flex-col">
        <!-- Header with action buttons -->
        <div class="flex justify-between items-center mb-4">
            <h2 class="font-bold text-lg">Documents</h2>
            <div class="flex space-x-2">
                <button @click="toggleSearch" class="p-2 hover:bg-gray-100 rounded"
                    :class="{ 'bg-gray-200': showSearch }" title="Toggle Search">
                    <Search class="w-4 h-4" />
                </button>
                <button @click="showCreateFileModal" class="p-2 hover:bg-gray-100 rounded flex items-center space-x-1"
                    title="New File">
                    <FilePlus class="w-4 h-4" />
                </button>
                <button @click="showCreateFolderModal" class="p-2 hover:bg-gray-100 rounded flex items-center space-x-1"
                    title="New Folder">
                    <FolderPlus class="w-4 h-4" />
                </button>
            </div>
        </div>

        <!-- Collapsible Search section -->
        <div v-if="showSearch" class="mb-4 overflow-hidden transition-all duration-200"
            :class="{ 'opacity-100': showSearch, 'opacity-0': !showSearch }">
            <div class="relative">
                <Search class="absolute left-2.5 top-2.5 w-4 h-4 text-gray-400" />
                <input v-model="searchQuery" type="text" placeholder="Search files and folders..."
                    class="w-full px-8 py-2 border rounded-lg focus:outline-none focus:border-blue-500"
                    ref="searchInput" />
                <button v-if="searchQuery" @click="clearSearch"
                    class="absolute right-2.5 top-2.5 text-gray-400 hover:text-gray-600">
                    <X class="w-4 h-4" />
                </button>
            </div>
        </div>

        <!-- File Tree -->
        <div class="flex-1 overflow-y-auto">
            <div v-if="searchQuery">
                <div v-if="filteredStructure.length > 0">
                    <ul class="space-y-1">
                        <li v-for="item in filteredStructure" :key="item.id">
                            <TreeItem :item="item" :is-filtered="true"
                                :matching-files="getMatchingFilesForFolder(item)" />
                        </li>
                    </ul>
                </div>
                <div v-else class="text-gray-500 text-center py-4">
                    No matches found for "{{ searchQuery }}"
                </div>
            </div>
            <div v-else>
                <ul class="space-y-1">
                    <li v-for="item in rootItems" :key="item.id">
                        <TreeItem :item="item" :is-filtered="false" />
                    </li>
                </ul>
            </div>
        </div>

        <!-- Create Modal -->
        <div v-if="showCreateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white p-4 rounded-lg shadow-lg w-96">
                <h3 class="text-lg font-semibold mb-4">
                    Create New {{ createType }}
                </h3>
                <input v-model="newItemName" type="text" class="w-full border rounded p-2 mb-4"
                    :placeholder="'Enter ' + createType + ' name'" @keyup.enter="confirmCreate" />
                <div class="flex justify-end space-x-2">
                    <button @click="cancelCreate" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">
                        Cancel
                    </button>
                    <button @click="confirmCreate" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Create
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<script setup>
import { computed, ref, nextTick } from 'vue'
import { useDocStore } from '@/store/docStore'
import TreeItem from './TreeItem.vue'

// Import only necessary Lucide icons
import {
    Search,
    X,
    FilePlus,
    FolderPlus
} from 'lucide-vue-next'

const docStore = useDocStore()
const rootItems = computed(() => docStore.rootItems)

// Search functionality
const searchQuery = ref('')
const showSearch = ref(false)
const searchInput = ref(null)

function toggleSearch() {
    showSearch.value = !showSearch.value
    if (showSearch.value) {
        nextTick(() => {
            searchInput.value?.focus()
        })
    } else {
        clearSearch()
    }
}

function clearSearch() {
    searchQuery.value = ''
}

// Helper function to get all files in a folder and its subfolders
function getAllFilesInFolder(folder) {
    const result = []
    const children = docStore.getChildren(folder.id)
    children.forEach(child => {
        if (child.type === 'file') {
            result.push(child)
        } else if (child.type === 'folder') {
            result.push(...getAllFilesInFolder(child))
        }
    })
    return result
}

// Helper function to get immediate files in a folder (non-recursive)
function getImmediateFiles(folder) {
    return docStore.getChildren(folder.id).filter(child => child.type === 'file')
}

// Helper function to check if text matches search query
function matchesSearch(text) {
    return text.toLowerCase().includes(searchQuery.value.toLowerCase())
}

// Get matching files for a specific folder
function getMatchingFilesForFolder(folder) {
    if (!searchQuery.value || !folder) return []
    if (matchesSearch(folder.name)) {
        return getImmediateFiles(folder)
    }
    return getAllFilesInFolder(folder).filter(file => matchesSearch(file.name))
}

// Check if a folder or its children match the search
function folderMatchesSearch(folder) {
    if (matchesSearch(folder.name)) return true
    const matchingFiles = getAllFilesInFolder(folder).filter(file => matchesSearch(file.name))
    if (matchingFiles.length > 0) return true
    const children = docStore.getChildren(folder.id)
    const subfolders = children.filter(child => child.type === 'folder')
    return subfolders.some(subfolder => folderMatchesSearch(subfolder))
}

const filteredStructure = computed(() => {
    if (!searchQuery.value) return []
    return rootItems.value.reduce((acc, item) => {
        if (item.type === 'folder') {
            if (folderMatchesSearch(item)) {
                acc.push(item)
            }
        } else if (item.type === 'file' && matchesSearch(item.name)) {
            acc.push(item)
        }
        return acc
    }, [])
})

// Create modal state
const showCreateModal = ref(false)
const createType = ref('')
const newItemName = ref('')

function showCreateFileModal() {
    createType.value = 'File'
    showCreateModal.value = true
}

function showCreateFolderModal() {
    createType.value = 'Folder'
    showCreateModal.value = true
}

function confirmCreate() {
    if (newItemName.value.trim()) {
        if (createType.value === 'File') {
            docStore.createFile(newItemName.value)
        } else {
            docStore.createFolder(newItemName.value)
        }
        cancelCreate()
    }
}

function cancelCreate() {
    showCreateModal.value = false
    newItemName.value = ''
    createType.value = ''
}
</script>

----- END: src/components/SideBar.vue -----

----- START: src/components/SignupForm.vue -----
<template>
    <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-md w-full space-y-8">
            <div>
                <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                    Create your account
                </h2>
            </div>
            <form class="mt-8 space-y-6" @submit.prevent="handleSubmit">
                <div class="rounded-md shadow-sm -space-y-px">
                    <div>
                        <label for="username" class="sr-only">Username</label>
                        <input id="username" v-model="username" name="username" type="text" required
                            class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Username">
                    </div>
                    <div>
                        <label for="password" class="sr-only">Password</label>
                        <input id="password" v-model="password" name="password" type="password" required
                            class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Password">
                    </div>
                    <div>
                        <label for="confirmPassword" class="sr-only">Confirm Password</label>
                        <input id="confirmPassword" v-model="confirmPassword" name="confirmPassword" type="password"
                            required
                            class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Confirm Password">
                    </div>
                </div>

                <div>
                    <button type="submit"
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        :disabled="loading">
                        {{ loading ? 'Creating account...' : 'Sign up' }}
                    </button>
                </div>

                <div v-if="error" class="text-red-500 text-center text-sm">
                    {{ error }}
                </div>

                <div class="text-sm text-center">
                    <router-link to="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
                        Already have an account? Sign in
                    </router-link>
                </div>
            </form>
        </div>
    </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useAuthStore } from '../store/authStore'
import { useDocStore } from '../store/docStore'
import { useRouter } from 'vue-router'

const authStore = useAuthStore()
const docStore = useDocStore()
const router = useRouter()

const username = ref('')
const password = ref('')
const confirmPassword = ref('')
const loading = ref(false)
const error = ref('')

const isValid = computed(() => {
    return username.value.length >= 3 &&
        password.value.length >= 6 &&
        password.value === confirmPassword.value
})

async function handleSubmit() {
    if (!isValid.value) {
        error.value = password.value !== confirmPassword.value
            ? 'Passwords do not match'
            : 'Username must be at least 3 characters and password at least 6 characters'
        return
    }

    loading.value = true
    error.value = ''

    try {
        console.log('Starting signup process...')
        await authStore.signup(username.value, password.value)
        console.log('Signup successful, attempting login...')
        await authStore.login(username.value, password.value)
        console.log('Login successful, initializing CouchDB...')
        await docStore.initCouchDB()
        console.log('All steps completed, redirecting...')
        router.push('/')
    } catch (err) {
        console.error('Signup process error:', err)
        error.value = err.message || 'Failed to create account. Please try again.'
        if (err.message.includes('conflict')) {
            error.value = 'Username already exists. Please choose another.'
        }
    } finally {
        loading.value = false
    }
}
</script>
----- END: src/components/SignupForm.vue -----

----- START: src/components/TreeItem.vue -----
<template>
    <div>
        <!-- Context Menu -->
        <div v-if="showContextMenu" class="fixed bg-white shadow-lg rounded-lg border p-2 z-50"
            :style="{ top: contextMenuY + 'px', left: contextMenuX + 'px' }">
            <button @click="handleDelete"
                class="w-full text-left px-3 py-1 hover:bg-red-100 text-red-600 rounded flex items-center space-x-1">
                <Trash2 class="w-4 h-4" />
                <span>Delete</span>
            </button>
            <div class="border-t my-1"></div>
            <button v-if="isFolder" @click="handleNewFile"
                class="w-full text-left px-3 py-1 hover:bg-gray-100 rounded flex items-center space-x-1">
                <FilePlus class="w-4 h-4" />
                <span>New File</span>
            </button>
            <button v-if="isFolder" @click="handleNewFolder"
                class="w-full text-left px-3 py-1 hover:bg-gray-100 rounded flex items-center space-x-1">
                <FolderPlus class="w-4 h-4" />
                <span>New Folder</span>
            </button>
        </div>

        <!-- FOLDER -->
        <div v-if="isFolder" class="flex items-center space-x-2 cursor-pointer group"
            @contextmenu.prevent="showMenu($event)">
            <span @click.stop="toggleLocalFolderState" class="flex items-center">
                <ChevronDown v-if="isOpen" class="w-4 h-4" />
                <ChevronRight v-else class="w-4 h-4" />
            </span>
            <span class="font-semibold flex-grow" @click.stop="toggleLocalFolderState">
                <Folder class="inline-block w-4 h-4 mr-1" />
                {{ item.name }}
                <span v-if="isFiltered && matchingFiles.length > 0" class="text-sm text-gray-500">
                    ({{ matchingFiles.length }} matches)
                </span>
            </span>
            <button v-if="!isFiltered" class="opacity-0 group-hover:opacity-100 px-2 hover:bg-gray-200 rounded"
                @click.stop="showMenu($event)">
                <MoreHorizontal class="w-4 h-4" />
            </button>
        </div>

        <!-- FILE -->
        <div v-else class="flex items-center space-x-2 cursor-pointer group" :class="{ 'ml-6': isFiltered }"
            @click="handleFileClick(item.id)" @contextmenu.prevent="showMenu($event)">
            <File class="w-4 h-4" />
            <span class="flex-grow">
                {{ item.name }}
            </span>
            <button v-if="!isFiltered" class="opacity-0 group-hover:opacity-100 px-2 hover:bg-gray-200 rounded"
                @click.stop="showMenu($event)">
                <MoreHorizontal class="w-4 h-4" />
            </button>
        </div>

        <!-- Child items -->
        <ul v-if="isFolder && isOpen" class="ml-6 mt-1 border-l pl-2">
            <template v-if="isFiltered">
                <li v-for="file in matchingFiles" :key="file.id" class="mb-1">
                    <TreeItem :item="file" :is-filtered="true" />
                </li>
            </template>
            <template v-else>
                <li v-for="child in children" :key="child.id" class="mb-1">
                    <TreeItem :item="child" :is-filtered="false" />
                </li>
            </template>
        </ul>

        <!-- Create New Modal -->
        <div v-if="showCreateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white p-4 rounded-lg shadow-lg w-96">
                <h3 class="text-lg font-semibold mb-4">
                    Create New {{ createType }}
                </h3>
                <input v-model="newItemName" type="text" class="w-full border rounded p-2 mb-4"
                    :placeholder="'Enter ' + createType + ' name'" @keyup.enter="confirmCreate" />
                <div class="flex justify-end space-x-2">
                    <button @click="cancelCreate" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">
                        Cancel
                    </button>
                    <button @click="confirmCreate" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                        Create
                    </button>
                </div>
            </div>
        </div>
    </div>
</template>

<script setup>
import { computed, ref, onMounted, onUnmounted } from 'vue'
import { useDocStore } from '@/store/docStore'
import TreeItem from './TreeItem.vue'

// Import necessary Lucide icons
import {
    Trash2,
    FilePlus,
    FolderPlus,
    MoreHorizontal,
    ChevronRight,
    ChevronDown,
    Folder,
    File
} from 'lucide-vue-next'

const props = defineProps({
    item: { type: Object, required: true },
    isFiltered: { type: Boolean, default: false },
    matchingFiles: { type: Array, default: () => [] }
})

const docStore = useDocStore()

// Type checks
const isFolder = computed(() => props.item.type === 'folder')
const isFile = computed(() => props.item.type === 'file')

// Local folder state for filtered view
const localFolderState = ref(true)

// Folder open state
const isOpen = computed(() => {
    if (!isFolder.value) return false
    return props.isFiltered
        ? localFolderState.value
        : docStore.openFolders.has(props.item.id)
})

// Context menu state
const showContextMenu = ref(false)
const contextMenuX = ref(0)
const contextMenuY = ref(0)

// Create modal state
const showCreateModal = ref(false)
const createType = ref('')
const newItemName = ref('')

// Get child items for folders
const children = computed(() => {
    if (isFolder.value) {
        return docStore.getChildren(props.item.id)
    }
    return []
})

// Event Handlers
function toggleLocalFolderState() {
    if (props.isFiltered) {
        localFolderState.value = !localFolderState.value
    } else {
        docStore.toggleFolder(props.item.id)
    }
}

function handleFileClick(fileId) {
    docStore.selectFile(fileId)
}

function showMenu(event) {
    if (!props.isFiltered) {
        contextMenuX.value = event.clientX
        contextMenuY.value = event.clientY
        showContextMenu.value = true
    }
}

function handleDelete() {
    if (confirm(`Are you sure you want to delete ${props.item.name}?`)) {
        docStore.deleteItem(props.item.id)
    }
    showContextMenu.value = false
}

function handleNewFile() {
    createType.value = 'File'
    showCreateModal.value = true
    showContextMenu.value = false
}

function handleNewFolder() {
    createType.value = 'Folder'
    showCreateModal.value = true
    showContextMenu.value = false
}

function confirmCreate() {
    if (newItemName.value.trim()) {
        if (createType.value === 'File') {
            docStore.createFile(newItemName.value, props.item.id)
        } else {
            docStore.createFolder(newItemName.value, props.item.id)
        }
        cancelCreate()
    }
}

function cancelCreate() {
    showCreateModal.value = false
    newItemName.value = ''
    createType.value = ''
}

// Close context menu when clicking outside
function handleClickOutside() {
    if (showContextMenu.value) {
        showContextMenu.value = false
    }
}

onMounted(() => {
    document.addEventListener('click', handleClickOutside)
})
onUnmounted(() => {
    document.removeEventListener('click', handleClickOutside)
})
</script>

----- END: src/components/TreeItem.vue -----

----- START: src/pages/HomePage.vue -----
<template>
    <div class="h-screen flex flex-col overflow-hidden" ref="container">
        <!-- Top Navbar -->
        <nav class="bg-gray-100 border-b">
            <div class="flex items-center justify-between px-4 py-2">
                <!-- Left side -->
                <div class="flex items-center space-x-4">
                    <!-- View toggles -->
                    <div class="flex space-x-2">
                        <button @click="ui.toggleSidebar()"
                            class="px-3 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1"
                            :class="{ 'bg-gray-200': ui.showSidebar }" title="Toggle Sidebar">
                            <Folder class="w-4 h-4" />
                            <span>Sidebar</span>
                        </button>

                        <button @click="ui.toggleEditor()"
                            class="px-3 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1"
                            :class="{ 'bg-gray-200': ui.showEditor }" title="Toggle Editor">
                            <Edit3 class="w-4 h-4" />
                            <span>Editor</span>
                        </button>

                        <button @click="ui.togglePreview()"
                            class="px-3 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1"
                            :class="{ 'bg-gray-200': ui.showPreview }" title="Toggle Preview">
                            <Eye class="w-4 h-4" />
                            <span>Preview</span>
                        </button>
                    </div>

                    <!-- Separator -->
                    <div class="w-px h-6 bg-gray-300 mx-2"></div>

                    <!-- Toggle Tools -->
                    <button @click="ui.toggleActionBar()"
                        class="px-3 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1"
                        :class="{ 'bg-gray-200': ui.showActionBar }" title="Toggle Tools">
                        <Paintbrush class="w-4 h-4" />
                        <span>Tools</span>
                    </button>
                </div>

                <!-- Right side -->
                <div class="flex items-center space-x-2">
                    <button @click="showImportModal = true"
                        class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1">
                        <Upload class="w-4 h-4" />
                        <span>Import</span>
                    </button>
                    <button @click="handleExport"
                        class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1">
                        <Download class="w-4 h-4" />
                        <span>Export</span>
                    </button>
                    <button @click="goToStyles"
                        class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1">
                        <Palette class="w-4 h-4" />
                        <span>Styles</span>
                    </button>

                    <!-- NEW LOGIN / LOGOUT BUTTONS -->
                    <button v-if="!authStore.isAuthenticated" @click="goToLogin"
                        class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1">
                        Login
                    </button>
                    <button v-else @click="handleLogout"
                        class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded flex items-center space-x-1">
                        Logout
                    </button>
                </div>
            </div>

            <!-- Collapsible Action Bar -->
            <transition name="fade">
                <div v-if="ui.showActionBar" class="border-t bg-gray-50 px-4 py-2">
                    <div class="flex flex-wrap gap-2 items-center">
                        <!-- Text formatting -->
                        <button v-for="format in textFormats" :key="format.label"
                            @click="editorRef.insertFormat(format.prefix, format.suffix)"
                            class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm flex items-center gap-1"
                            :title="format.label">
                            <component :is="format.icon" class="w-4 h-4" />
                            <span>{{ format.label }}</span>
                        </button>

                        <!-- Divider -->
                        <div class="w-px h-6 bg-gray-300 mx-2"></div>

                        <!-- Lists -->
                        <button v-for="list in listFormats" :key="list.label" @click="editorRef.insertList(list.prefix)"
                            class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm flex items-center gap-1"
                            :title="list.label">
                            <component :is="list.icon" class="w-4 h-4" />
                            <span>{{ list.label }}</span>
                        </button>

                        <!-- Divider -->
                        <div class="w-px h-6 bg-gray-300 mx-2"></div>

                        <!-- Table -->
                        <button @click="editorRef.insertTable"
                            class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm flex items-center gap-1"
                            title="Insert Table">
                            <Table class="w-4 h-4" />
                            <span>Table</span>
                        </button>

                        <!-- Code block -->
                        <button @click="editorRef.insertCodeBlock"
                            class="px-3 py-1 bg-white border rounded hover:bg-gray-50 text-sm flex items-center gap-1"
                            title="Insert Code Block">
                            <Code2 class="w-4 h-4" />
                            <span>Code</span>
                        </button>

                        <!-- Divider -->
                        <div class="w-px h-6 bg-gray-300 mx-2"></div>

                        <!-- Toggle stats / metadata -->
                        <button @click="ui.toggleStats()"
                            class="px-3 py-1 text-gray-700 hover:bg-gray-200 rounded flex items-center gap-1"
                            :class="{ 'bg-gray-200': ui.showStats }" title="Toggle Document Stats">
                            <BarChart2 class="w-4 h-4" />
                            <span>Stats</span>
                        </button>
                        <button @click="ui.toggleMetadata()"
                            class="px-3 py-1 text-gray-700 hover:bg-gray-200 rounded flex items-center gap-1"
                            :class="{ 'bg-gray-200': ui.showMetadata }" title="Toggle File Metadata">
                            <Info class="w-4 h-4" />
                            <span>Info</span>
                        </button>

                        <!-- Divider -->
                        <div class="w-px h-6 bg-gray-300 mx-2"></div>

                        <!-- Search box -->
                        <div class="flex items-center gap-2">
                            <div class="relative">
                                <Search class="absolute left-2 top-1.5 w-4 h-4 text-gray-400" />
                                <input type="text" placeholder="Find text..." v-model="searchTerm"
                                    class="border pl-7 pr-2 py-1 rounded text-sm w-36 focus:outline-none focus:border-blue-500" />
                            </div>
                            <button @click="editorRef.findNext(searchTerm)"
                                class="px-2 py-1 bg-white border rounded hover:bg-gray-50 text-sm flex items-center gap-1">
                                <ArrowRight class="w-4 h-4" />
                                <span>Next</span>
                            </button>
                        </div>
                    </div>
                </div>
            </transition>
        </nav>

        <!-- Main content area -->
        <div class="flex flex-1 overflow-hidden" ref="mainContent">
            <!-- Sidebar with resizer -->
            <template v-if="ui.showSidebar">
                <div :style="{ width: sidebarWidth + 'px' }" class="flex-shrink-0 bg-gray-100 border-r overflow-hidden">
                    <div class="h-full overflow-y-auto p-4">
                        <Sidebar />
                    </div>
                </div>
                <div class="w-1 cursor-col-resize bg-gray-200 hover:bg-blue-300 active:bg-blue-400"
                    @mousedown="startResize('sidebar', $event)"></div>
            </template>

            <!-- Editor with resizer -->
            <template v-if="ui.showEditor">
                <div :style="{ width: editorWidth + 'px' }" class="flex-shrink-0 overflow-hidden">
                    <div class="h-full overflow-y-auto p-4">
                        <!-- Note the ref on the Editor -->
                        <Editor ref="editorRef" />
                    </div>
                </div>
                <div v-if="ui.showPreview"
                    class="w-1 cursor-col-resize bg-gray-200 hover:bg-blue-300 active:bg-blue-400"
                    @mousedown="startResize('editor', $event)"></div>
            </template>

            <!-- Preview -->
            <div v-if="ui.showPreview" class="flex-1 overflow-hidden">
                <div class="h-full overflow-y-auto p-4">
                    <Preview />
                </div>
            </div>
        </div>
    </div>
    <ImportModal :show="showImportModal" @close="showImportModal = false" @import-success="handleImportSuccess" />
</template>

<script setup>
import { ref, onMounted, onUnmounted, watch } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { useDocStore } from '@/store/docStore'
import { useUiStore } from '@/store/uiStore'
import { useAuthStore } from '@/store/authStore' // <--- ADDED
import Sidebar from '@/components/SideBar.vue'
import Editor from '@/components/Editor.vue'
import Preview from '@/components/Preview.vue'
import ImportModal from '@/components/ImportModal.vue'

import {
    Folder,
    Edit3,
    Eye,
    Paintbrush,
    Upload,
    Download,
    Palette,
    Bold,
    Italic,
    Strikethrough,
    MessageSquare,
    List,
    ListOrdered,
    CheckSquare,
    Table,
    Code2,
    BarChart2,
    Info,
    Search,
    ArrowRight
} from 'lucide-vue-next'

const docStore = useDocStore()
const ui = useUiStore()
const authStore = useAuthStore() // <--- ADDED

const router = useRouter()
const route = useRoute()

const container = ref(null)
const mainContent = ref(null)
const sidebarWidth = ref(300)
const editorWidth = ref(500)
const isResizing = ref(false)
const currentResizer = ref(null)
const startX = ref(0)
const startWidth = ref(0)
const showImportModal = ref(false)
const searchTerm = ref('')

// 1) Watch route params -> open correct file
onMounted(() => {
    if (route.params.fileId) {
        docStore.selectFile(route.params.fileId)
    }
})
watch(() => docStore.selectedFileId, (newFileId) => {
    if (newFileId && route.params.fileId !== newFileId) {
        router.replace({ name: 'doc', params: { fileId: newFileId } })
    } else if (!newFileId && route.name !== 'home') {
        router.replace({ name: 'home' })
    }
})

// 2) Panel toggles and resizing
function adjustEditorWidthForContainer() {
    if (!mainContent.value || !ui.showEditor) return
    const containerWidth = mainContent.value.clientWidth
    const sidebarTotalWidth = ui.showSidebar ? sidebarWidth.value + 4 : 0
    const availableWidth = containerWidth - sidebarTotalWidth
    // Force preview off if editor tries to fill container
    if (editorWidth.value >= availableWidth - 50) {
        ui.showPreview = false
    }
}

function startResize(panel, event) {
    isResizing.value = true
    currentResizer.value = panel
    startX.value = event.pageX
    startWidth.value = (panel === 'sidebar') ? sidebarWidth.value : editorWidth.value

    document.addEventListener('mousemove', handleMouseMove)
    document.addEventListener('mouseup', stopResize)
    document.body.style.userSelect = 'none'
}

function handleMouseMove(event) {
    if (!isResizing.value || !mainContent.value) return

    const containerWidth = mainContent.value.clientWidth
    const diff = event.pageX - startX.value

    if (currentResizer.value === 'sidebar') {
        const newWidth = startWidth.value + diff
        if (newWidth <= 0) {
            ui.showSidebar = false
            stopResize()
        } else {
            sidebarWidth.value = newWidth
            adjustEditorWidthForContainer()
        }
    } else if (currentResizer.value === 'editor') {
        const newWidth = startWidth.value + diff
        const sidebarTotalWidth = ui.showSidebar ? sidebarWidth.value + 4 : 0
        const availableWidth = containerWidth - sidebarTotalWidth

        if (newWidth <= 0) {
            ui.showEditor = false
            stopResize()
        } else if (newWidth >= availableWidth - 50) {
            editorWidth.value = availableWidth
            ui.showPreview = false
        } else {
            editorWidth.value = newWidth
            if (!ui.showPreview) {
                ui.showPreview = true
            }
        }
    }
}

function stopResize() {
    isResizing.value = false
    document.removeEventListener('mousemove', handleMouseMove)
    document.removeEventListener('mouseup', stopResize)
    document.body.style.userSelect = ''
}

let resizeTimeout
onMounted(() => {
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout)
        resizeTimeout = setTimeout(() => {
            adjustEditorWidthForContainer()
        }, 100)
    })
})
onUnmounted(() => {
    document.removeEventListener('mousemove', handleMouseMove)
    document.removeEventListener('mouseup', stopResize)
    window.removeEventListener('resize')
    clearTimeout(resizeTimeout)
})

// Export
function handleExport() {
    const jsonString = docStore.exportJson()
    const blob = new Blob([jsonString], { type: 'application/json' })
    const url = URL.createObjectURL(blob)

    const link = document.createElement('a')
    link.href = url
    link.download = 'data.json'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
}

function goToStyles() {
    router.push('/styles')
}

// The old Editor toolbar data (text/list formats) used by the action bar
const textFormats = [
    { label: 'Bold', icon: Bold, prefix: '**', suffix: '**' },
    { label: 'Italic', icon: Italic, prefix: '_', suffix: '_' },
    { label: 'Strike', icon: Strikethrough, prefix: '~~', suffix: '~~' },
    { label: 'Quote', icon: MessageSquare, prefix: '> ', suffix: '\n' },
]
const listFormats = [
    { label: 'Bullet List', icon: List, prefix: '* ' },
    { label: 'Numbered List', icon: ListOrdered, prefix: '1. ' },
    { label: 'Task List', icon: CheckSquare, prefix: '- [ ] ' },
]

// We’ll access Editor’s methods via a template ref:
const editorRef = ref(null)

function handleImportSuccess() {
    console.log('Import successful')
}

// NEW: handleLogout and goToLogin
async function handleLogout() {
    try {
        await authStore.logout()
        router.push('/login')
    } catch (err) {
        console.error('Error logging out:', err)
    }
}

function goToLogin() {
    router.push('/login')
}
</script>

<style scoped>
.fade-enter-active,
.fade-leave-active {
    transition: opacity 0.15s;
}

.fade-enter-from,
.fade-leave-to {
    opacity: 0;
}
</style>

----- END: src/pages/HomePage.vue -----

----- START: src/pages/StylesPage.vue -----
<template>
    <div class="p-4">
        <h1 class="text-2xl font-bold mb-4">Customize Markdown Styles</h1>

        <!-- Back to main -->
        <button class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded mb-4" @click="goBack">
            Back
        </button>

        <div class="space-y-4">
            <div v-for="(value, key) in styleMap" :key="key" class="flex items-center space-x-4">
                <label class="w-20 font-semibold">{{ key }}</label>
                <input type="text" class="border p-2 rounded flex-1" v-model="styleMap[key]"
                    @change="handleStyleChange(key, styleMap[key])" />
            </div>
        </div>
    </div>
</template>

<script setup>
import { useRouter } from 'vue-router'
import { computed } from 'vue'
import { useDocStore } from '@/store/docStore'

const docStore = useDocStore()
const router = useRouter()

// We make a local copy of docStore.styles so we can edit them. 
// If you want immediate updates, you can skip the copy and write directly to docStore.styles.
const styleMap = computed({
    get: () => docStore.styles,
    set: (newVal) => { }
})

function handleStyleChange(key, newVal) {
    docStore.updateStyle(key, newVal)
}

function goBack() {
    router.push('/')
}
</script>
----- END: src/pages/StylesPage.vue -----

----- START: src/store/authStore.js -----
import { defineStore } from 'pinia'
import { ref } from 'vue'
import PouchDB from 'pouchdb-browser'
import { useDocStore } from '@/store/docStore'

export const useAuthStore = defineStore('authStore', () => {
    const user = ref(null)
    const isAuthenticated = ref(false)
    // Keep track of the last logged-in username to handle switching between users
    const lastLoggedInUser = ref(null)

    const authDB = new PouchDB('_users')

    async function login(username, password) {
        try {
            // If we have a different user logging in than the last known user, destroy the old local DB
            if (lastLoggedInUser.value && lastLoggedInUser.value !== username) {
                const docStore = useDocStore()
                await docStore.destroyLocalDB(lastLoggedInUser.value)
            }

            const response = await fetch('http://localhost:5984/_session', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: username, password }),
                credentials: 'include'
            })

            if (!response.ok) {
                throw new Error('Login failed')
            }

            const data = await response.json()
            user.value = {
                name: username,
                roles: data.roles,
                dbName: `userdb-${username.toLowerCase()}`
            }
            isAuthenticated.value = true
            lastLoggedInUser.value = username

            // Initialize docStore for the newly logged-in user
            const docStore = useDocStore()
            await docStore.initCouchDB()

            return true
        } catch (error) {
            console.error('Login error:', error)
            throw error
        }
    }

    async function logout() {
        try {
            // 1) Destroy session on the server
            await fetch('http://localhost:5984/_session', {
                method: 'DELETE',
                credentials: 'include'
            })

            // 2) Destroy the local DB for the user who is logging out
            if (user.value?.name) {
                const docStore = useDocStore()
                await docStore.destroyLocalDB(user.value.name)
            }

            // 3) Clear user info in auth store
            user.value = null
            isAuthenticated.value = false
            lastLoggedInUser.value = null

            // 4) Reset the docStore in "guest" mode
            const docStore = useDocStore()
            docStore.resetStore()
            await docStore.initCouchDB()

        } catch (error) {
            console.error('Logout error:', error)
            throw error
        }
    }

    async function checkAuth() {
        try {
            const response = await fetch('http://localhost:5984/_session', {
                credentials: 'include'
            })
            const data = await response.json()

            if (data.userCtx.name) {
                // If a different user is discovered via cookies, destroy old DB
                if (lastLoggedInUser.value && lastLoggedInUser.value !== data.userCtx.name) {
                    const docStore = useDocStore()
                    await docStore.destroyLocalDB(lastLoggedInUser.value)
                }

                user.value = {
                    name: data.userCtx.name,
                    roles: data.userCtx.roles,
                    dbName: `userdb-${data.userCtx.name.toLowerCase()}`
                }
                isAuthenticated.value = true
                lastLoggedInUser.value = data.userCtx.name

                // Make sure docStore is initialized for this user
                const docStore = useDocStore()
                await docStore.initCouchDB()

                return true
            } else {
                return false
            }
        } catch (error) {
            console.error('Auth check error:', error)
            return false
        }
    }

    /**
     * Updated signup function calls our new signup-service instead of CouchDB directly with admin creds.
     */
    async function signup(username, password) {
        try {
            const response = await fetch('http://localhost:3000/signup', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            })

            const data = await response.json()
            if (!response.ok) {
                console.error('Signup error (from signup-service):', data)
                throw new Error(data.reason || data.error || 'Signup service failed')
            }

            return true
        } catch (error) {
            console.error('Signup error:', error)
            throw error
        }
    }

    return {
        user,
        isAuthenticated,
        lastLoggedInUser,
        login,
        logout,
        checkAuth,
        signup
    }
})

----- END: src/store/authStore.js -----

----- START: src/store/docStore.js -----
import { defineStore } from 'pinia'
import MarkdownIt from 'markdown-it'
import markdownItTaskLists from 'markdown-it-task-lists'
import { ref, computed, watch } from 'vue'
import PouchDB from 'pouchdb-browser'
import { useAuthStore } from '@/store/authStore'  // <--- ADDED

// Initialize with a default doc
const EMPTY_DATA = {
    'welcome': {
        id: 'welcome',
        type: 'file',
        name: 'Welcome.md',
        parentId: null,
        hash: Date.now(),
        tx: Date.now()
    },
    'welcome/content': {
        id: 'welcome/content',
        type: 'content',
        text: '# Welcome to Markdown Editor\n\nStart by importing your data or creating new files.',
        properties: '\n',
        discussions: {},
        comments: {},
        hash: Date.now(),
        tx: Date.now()
    }
}

export const useDocStore = defineStore('docStore', () => {
    const data = ref({ ...EMPTY_DATA })
    const selectedFileId = ref('welcome')
    const openFolders = ref(new Set())

    const styles = ref({
        h1: 'text-3xl font-bold mt-4 mb-2 block',
        h2: 'text-2xl font-semibold mt-3 mb-2 block',
        h3: 'text-xl font-semibold mt-2 mb-1 block',
        p: 'mb-2 leading-relaxed',
        ul: 'list-disc list-inside mb-2',
        ol: 'list-decimal list-inside mb-2',
        li: 'ml-5 mb-1',
        code: 'bg-gray-100 text-sm px-1 py-0.5 rounded',
        blockquote: 'border-l-4 border-gray-300 pl-4 italic my-2',
        hr: 'border-t my-4',
        em: 'italic',
        strong: 'font-bold',
        a: 'text-blue-600 underline',
        img: 'max-w-full h-auto',
        table: 'border-collapse border border-gray-300 my-2',
        tr: '',
        th: 'border border-gray-300 bg-gray-100 px-2 py-1',
        td: 'border border-gray-300 px-2 py-1',
    })

    let localDB = null  // <- We'll store the current local PouchDB instance here

    // ----------------------------------------------------
    // Basic getters
    // ----------------------------------------------------
    const itemsArray = computed(() => Object.values(data.value))

    const rootItems = computed(() => {
        const folders = itemsArray.value.filter(i => !i.parentId && i.type === 'folder')
        const files = itemsArray.value.filter(i => !i.parentId && i.type === 'file')
        return [...sortByName(folders), ...sortByName(files)]
    })

    function sortByName(items) {
        return items.slice().sort((a, b) => (a.name || '').localeCompare(b.name || ''))
    }

    function getChildren(parentId) {
        const folders = itemsArray.value.filter(i => i.parentId === parentId && i.type === 'folder')
        const files = itemsArray.value.filter(i => i.parentId === parentId && i.type === 'file')
        return [...sortByName(folders), ...sortByName(files)]
    }

    const selectedFile = computed(() => {
        if (!selectedFileId.value) return null
        return data.value[selectedFileId.value] || null
    })

    const selectedFileContent = computed(() => {
        if (!selectedFile.value) return ''
        const contentKey = `${selectedFile.value.id}/content`
        return data.value[contentKey]?.text || ''
    })

    // ----------------------------------------------------
    // CRUD operations
    // ----------------------------------------------------
    function createFile(name, parentId = null) {
        const id = generateId()
        const newFile = {
            id,
            type: 'file',
            name,
            parentId,
            hash: Date.now(),
            tx: Date.now()
        }
        const contentId = `${id}/content`
        const content = {
            id: contentId,
            type: 'content',
            text: '',
            properties: '\n',
            discussions: {},
            comments: {},
            hash: Date.now(),
            tx: Date.now()
        }

        data.value = {
            ...data.value,
            [id]: newFile,
            [contentId]: content
        }
        selectFile(id)
        if (parentId) {
            openFolders.value.add(parentId)
        }
        return id
    }

    function createFolder(name, parentId = null) {
        const id = generateId()
        const newFolder = {
            id,
            type: 'folder',
            name,
            parentId,
            hash: Date.now(),
            tx: Date.now()
        }
        data.value = {
            ...data.value,
            [id]: newFolder
        }
        if (parentId) {
            openFolders.value.add(parentId)
        }
        return id
    }

    function deleteItem(id) {
        if (!data.value[id]) return

        if (data.value[id].type === 'folder') {
            const children = getChildren(id)
            children.forEach(child => deleteItem(child.id))
            openFolders.value.delete(id)
        }

        if (data.value[id].type === 'file') {
            const contentKey = `${id}/content`
            delete data.value[contentKey]
            if (selectedFileId.value === id) {
                selectedFileId.value = null
            }
        }

        delete data.value[id]
        data.value = { ...data.value }
    }

    function selectFile(fileId) {
        selectedFileId.value = fileId
    }

    function updateFileContent(fileId, newText) {
        const contentKey = `${fileId}/content`
        if (data.value[contentKey]) {
            data.value = {
                ...data.value,
                [contentKey]: {
                    ...data.value[contentKey],
                    text: newText,
                    lastModified: new Date().toISOString()
                }
            }
        }
    }

    // ----------------------------------------------------
    // Export / Import
    // ----------------------------------------------------
    function exportJson() {
        return JSON.stringify(data.value, null, 2)
    }

    function importData(newData) {
        try {
            if (typeof newData !== 'object' || newData === null) {
                throw new Error('Invalid data structure')
            }
            const validatedData = {}
            const files = new Set()
            const contentFiles = new Set()

            for (const [key, item] of Object.entries(newData)) {
                if (!item || typeof item !== 'object') {
                    throw new Error(`Invalid item for key ${key}`)
                }
                if (!item.id || !item.type) {
                    throw new Error(`Missing id or type for ${key}`)
                }
                switch (item.type) {
                    case 'file':
                        if (!item.name) {
                            throw new Error(`File ${item.id} missing name`)
                        }
                        files.add(item.id)
                        validatedData[key] = item
                        break
                    case 'content':
                        if (typeof item.text === 'undefined') {
                            throw new Error(`Content ${item.id} missing text`)
                        }
                        contentFiles.add(item.id.split('/')[0])
                        validatedData[key] = item
                        break
                    case 'folder':
                        if (!item.name) {
                            throw new Error(`Folder ${item.id} missing name`)
                        }
                        validatedData[key] = item
                        break
                    default:
                        validatedData[key] = item
                }
            }

            files.forEach(fileId => {
                if (!contentFiles.has(fileId)) {
                    console.warn(`Warning: File ${fileId} has no content`)
                }
            })

            data.value = validatedData
            selectedFileId.value = null
            openFolders.value = new Set()

            const firstFile = Object.values(validatedData).find(item => item.type === 'file')
            if (firstFile) {
                selectedFileId.value = firstFile.id
            }
        } catch (error) {
            console.error('Import failed:', error)
            throw error
        }
    }

    // ----------------------------------------------------
    // Additional helpers
    // ----------------------------------------------------
    function toggleFolder(folderId) {
        if (openFolders.value.has(folderId)) {
            openFolders.value.delete(folderId)
        } else {
            openFolders.value.add(folderId)
        }
    }

    function updateStyle(key, newClass) {
        if (styles.value[key] !== undefined) {
            styles.value[key] = newClass
        }
    }

    function getMarkdownIt() {
        const md = new MarkdownIt({
            html: true,
            linkify: true,
            typographer: true,
            breaks: true
        }).use(markdownItTaskLists)

        md.renderer.rules.paragraph_open = () => `<span class="${styles.value.p}">`
        md.renderer.rules.paragraph_close = () => '</span>'
        md.renderer.rules.heading_open = (tokens, idx) => {
            const tag = tokens[idx].tag
            return `<${tag} class="${styles.value[tag]}">`
        }
        md.renderer.rules.bullet_list_open = () => `<ul class="${styles.value.ul}">`
        md.renderer.rules.ordered_list_open = () => `<ol class="${styles.value.ol}">`
        md.renderer.rules.list_item_open = (tokens, idx) => {
            if (tokens[idx].map && tokens[idx].map.length > 0) {
                // Check for task list
                if (tokens[idx + 2]?.type === 'task_list_item_open') {
                    const checked = tokens[idx + 2].checked
                    return `<li class="${styles.value.li}"><input type="checkbox" ${checked ? 'checked' : ''} disabled> `
                }
            }
            return `<li class="${styles.value.li}">`
        }
        md.renderer.rules.code_inline = (tokens, idx) =>
            `<code class="${styles.value.code}">${tokens[idx].content}</code>`
        md.renderer.rules.blockquote_open = () =>
            `<blockquote class="${styles.value.blockquote}">`
        md.renderer.rules.hr = () => `<hr class="${styles.value.hr}">`
        md.renderer.rules.em_open = () => `<em class="${styles.value.em}">`
        md.renderer.rules.strong_open = () => `<strong class="${styles.value.strong}">`
        md.renderer.rules.link_open = (tokens, idx) => {
            const href = tokens[idx].attrGet('href')
            return `<a href="${href}" class="${styles.value.a}" target="_blank" rel="noopener">`
        }
        md.renderer.rules.image = (tokens, idx) => {
            const token = tokens[idx]
            const src = token.attrGet('src')
            const alt = token.content
            const title = token.attrGet('title')
            return `<img src="${src}" alt="${alt}" title="${title || ''}" class="${styles.value.img}">`
        }
        md.renderer.rules.table_open = () => `<table class="${styles.value.table}">`
        md.renderer.rules.th_open = () => `<th class="${styles.value.th}">`
        md.renderer.rules.td_open = () => `<td class="${styles.value.td}">`

        return md
    }

    function generateId() {
        return Math.random().toString(36).substring(2, 15)
    }

    // ----------------------------------------------------
    // Local PouchDB & sync
    // ----------------------------------------------------

    /**
     * Close the current localDB instance, if any.
     */
    function closeLocalDB() {
        if (localDB) {
            localDB.close()
            localDB = null
        }
    }

    /**
     * Reset data to initial state. 
     * Use this when switching users so the old data doesn't linger.
     */
    function resetStore() {
        data.value = { ...EMPTY_DATA }
        selectedFileId.value = 'welcome'
        openFolders.value = new Set()
    }

    async function loadFromPouchDB() {
        try {
            const doc = await localDB.get('docStoreData')
            if (doc && doc.data) {
                data.value = doc.data
            }
        } catch (err) {
            if (err.status !== 404) {
                console.error('Error loading from PouchDB:', err)
            }
        }
    }

    async function _saveWithRetry(existing) {
        try {
            await localDB.put({
                ...existing,
                data: data.value
            })
        } catch (err) {
            if (err.name === 'conflict') {
                console.warn('docStoreData conflict detected. Fetching the latest _rev and retrying...')
                const freshDoc = await localDB.get('docStoreData')
                await localDB.put({
                    ...freshDoc,
                    data: data.value
                })
            } else {
                throw err
            }
        }
    }

    async function saveToPouchDB() {
        try {
            const existing = await localDB.get('docStoreData')
            await _saveWithRetry(existing)
        } catch (err) {
            if (err.status === 404) {
                // docStoreData doesn't exist, create it
                try {
                    await localDB.put({
                        _id: 'docStoreData',
                        data: data.value
                    })
                } catch (innerErr) {
                    if (innerErr.name === 'conflict') {
                        console.warn('Conflict on first put, fetching docStoreData again...')
                        const freshDoc = await localDB.get('docStoreData')
                        await localDB.put({
                            ...freshDoc,
                            data: data.value
                        })
                    } else {
                        console.error('Error saving to PouchDB (404 path):', innerErr)
                    }
                }
            } else {
                console.error('Error saving to PouchDB:', err)
            }
        }
    }

    function initSync() {
        const authStore = useAuthStore()
        if (!authStore.isAuthenticated) {
            console.log('User not authenticated; skipping remote sync.')
            return
        }
        const remoteCouch = `http://localhost:5984/${authStore.user.dbName}`

        localDB.sync(remoteCouch, {
            live: true,
            retry: true,
            fetch: (url, opts) => {
                return fetch(url, {
                    ...opts,
                    credentials: 'include'
                })
            }
        })
            .on('change', info => {
                console.log('Sync change:', info)
            })
            .on('paused', err => {
                if (err) {
                    console.error('Sync paused:', err)
                }
            })
            .on('active', () => {
                console.log('Sync active')
            })
            .on('denied', err => {
                console.error('Sync denied:', err)
            })
            .on('error', err => {
                console.error('Sync error:', err)
            })
    }

    /**
     * Initializes the local DB name based on whether user is authenticated.
     * Loads data, sets watchers, and starts sync if user is logged in.
     */
    async function initCouchDB() {
        const authStore = useAuthStore()

        // 1) Close any existing DB
        closeLocalDB()

        // 2) Choose DB name
        const localDBName = authStore.isAuthenticated
            ? `pn-markdown-notes-${authStore.user.name}`
            : 'pn-markdown-notes-guest'

        // 3) Open a new local DB instance
        localDB = new PouchDB(localDBName)

        // 4) Load data from local DB if it exists
        await loadFromPouchDB()

        // 5) Watch "data" so it saves to local PouchDB on changes
        watch(data, () => {
            saveToPouchDB()
        }, { deep: true })

        // 6) Attempt to sync (cookie-based) if logged in
        initSync()
    }
    // ----------------------------------------------------

    return {
        // state
        data,
        selectedFileId,
        openFolders,
        styles,

        // getters
        itemsArray,
        rootItems,
        selectedFile,
        selectedFileContent,

        // file/folder ops
        getChildren,
        selectFile,
        createFile,
        createFolder,
        deleteItem,
        updateFileContent,

        // import/export
        exportJson,
        importData,

        // folder toggling
        toggleFolder,

        // style updates
        updateStyle,

        // markdown
        getMarkdownIt,

        // main couchdb logic
        initCouchDB,
        closeLocalDB,
        resetStore
    }
})

----- END: src/store/docStore.js -----

----- START: src/store/uiStore.js -----
// store/uiStore.js
import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useUiStore = defineStore('uiStore', () => {
    // By default, everything is open
    const showSidebar = ref(true)
    const showEditor = ref(true)
    const showPreview = ref(true)

    // New flags for the collapsible action bar and for stats/metadata
    const showActionBar = ref(true)
    const showStats = ref(true)
    const showMetadata = ref(false)

    function toggleSidebar() {
        showSidebar.value = !showSidebar.value
    }

    function toggleEditor() {
        showEditor.value = !showEditor.value
    }

    function togglePreview() {
        showPreview.value = !showPreview.value
    }

    function toggleActionBar() {
        showActionBar.value = !showActionBar.value
    }

    function toggleStats() {
        showStats.value = !showStats.value
    }

    function toggleMetadata() {
        showMetadata.value = !showMetadata.value
    }

    return {
        showSidebar,
        showEditor,
        showPreview,
        showActionBar,
        showStats,
        showMetadata,
        toggleSidebar,
        toggleEditor,
        togglePreview,
        toggleActionBar,
        toggleStats,
        toggleMetadata,
    }
})

----- END: src/store/uiStore.js -----


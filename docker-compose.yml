# /docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-panino}
      POSTGRES_USER: ${POSTGRES_USER:-panino}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-panino}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-panino} -d ${POSTGRES_DB:-panino}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  powersync-service:
    # Use the official image
    image: journeyapps/powersync-service:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POWERSYNC_CONFIG_PATH: /config/powersync.yaml
      # Also disable SSL for the production compose file
      PS_DATA_SOURCE_URI: postgres://${POSTGRES_USER:-panino}:${POSTGRES_PASSWORD:-panino}@postgres:5432/${POSTGRES_DB:-panino}?sslmode=disable
      PS_JWT_SECRET: ${JWT_SECRET}
    volumes:
      # Mount the configuration directory
      - ./backend/powersync-service:/config

  auth-service:
    build: ./backend/auth-service
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-panino}:${POSTGRES_PASSWORD:-panino}@postgres:5432/${POSTGRES_DB:-panino}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 8000

  signup-service:
    build: ./backend/signup-service
    restart: always
    depends_on:
      - auth-service
      - powersync-service
    environment:
      AUTH_SERVICE_URL: http://auth-service:8000
      POWERSYNC_SERVICE_URL: http://powersync-service:7000
      NODE_ENV: production
      TURNSTILE_SECRET_KEY: ${TURNSTILE_SECRET_KEY}

  image-service:
    build: ./backend/image-service
    restart: always
    depends_on:
      - auth-service
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-panino}:${POSTGRES_PASSWORD:-panino}@postgres:5432/${POSTGRES_DB:-panino}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      NODE_ENV: production

  font-service:
    build: ./backend/font-service
    restart: always
    environment:
      PORT: 3002
      NODE_ENV: production

volumes:
  postgres-data: